openapi: 3.0.3
info:
  title: Yellow.ai APIs
  version: '1.0'
  description: |
   ## API Documentation: Yellow.ai

   Welcome to the API documentation for Yellow.ai! This comprehensive guide will walk you through the powerful RESTful API provided by Yellow.ai. With our API, you can seamlessly create and manage user data, retrieve user details, update user information, and unlock a host of other functionalities. Our API is designed to offer flexibility and simplicity, while prioritizing the security and integrity of your user data.

   ## Overview

   Yellow.ai offers a robust RESTful API that empowers you to manage user data, user events, outbound notifications, email ticketing, and more. Our API is designed to provide a seamless experience, offering flexibility and simplicity in its usage. We prioritize the security and integrity of your user data, ensuring that it remains protected throughout your interactions with our API. Leverage our powerful API to streamline your workflows and enhance your user management capabilities.

    ## Authentication
    Yellow.ai APIs support OAuth for authentication. To generate an authentication token, follow these steps:

    1. Ensure that you have super admin privileges for the bot.
    2. Access the Yellow.ai platform and navigate to the bot for which you want to generate the authentication token.
    3. In the bot settings or administration section, locate the option for generating an authentication token. The exact location may vary depending on the Yellow.ai platform version you are using.
    4. Click on the "Generate Token" or similar button to initiate the token generation process.
    5. You may be prompted to provide additional information or permissions for the token generation. Follow the on-screen instructions and provide the necessary details.
    6. Once the process is complete, the Yellow.ai platform will generate an authentication token for you.
    7. Safely store the authentication token as it will be required for making authenticated API requests to Yellow.ai APIs.
    8. Include the authentication token in the request headers of your API calls. Typically, you would add an `Authorization` header with the value `Bearer <authentication_token>`.
    9. Please note that the generated authentication token provides access to the APIs based on the permissions and privileges associated with your super admin account. Handle the token with caution.

   ## Generate API Keys


    API keys act as secure passcodes, granting authorized access to specific functionalities or resources within a system. They serve as an additional layer of protection, safeguarding sensitive data and ensuring that only authenticated users or applications can interact with the API.
    
    * Only Admins and Super Admins of the bot can create API keys with different roles.
    * Key creators or Super Admins can delete keys. Super admin can delete any key, regardless of the creator.


    To generate an API key, follow these steps:

    1. On the left navigation pane, click **Settings** > **API Keys**.
   
       ![](https://cdn.yellowmessenger.com/assets/yellow-docs/apikeys.png)

    2. Click **Generate new API key**.

       ![](https://cdn.yellowmessenger.com/assets/yellow-docs/generatekeys.png)

    3. Name the API key in **API Name** and select **User roles** from the dropdown. You can select multiple roles.

       <img src="https://i.imgur.com/UUCmfG1.png" width="40%"/>

    4. Click **+ Add Whitelisted IP** Address to specify the IPs that should be allowed access. This helps prevent disruptions caused by firewall restrictions. You can add multiple IP addresses as needed.
    5. Click **Save** to generate the API key.
    6. Copy the generated key and use it in your API calls wherever required.
   
    ![](https://i.imgur.com/VcDUuHe.png)





servers:
  - url: 'https://cloud.yellow.ai'
    description: India
  - url: 'https://r1.cloud.yellow.ai'
    description: MEA
  - url: 'https://r2.cloud.yellow.ai/cdp/api/v1'
    description: Indonasia
  - url: 'https://r3.cloud.yellow.ai'
    description: Singapore
  - url: 'https://r4.cloud.yellow.ai'
    description: USA
  - url: 'https://r5.cloud.yellow.ai'
    description: Europe
  - url: https://alpha5.yellowmessenger.com
    description: Alpha5
  - url: https://staging.yellowmessenger.com
    description: Staging

  
tags:
  - name: User
    description: Manage users
  - name: Engage
    description: Campaign related APIs
  - name: Event
    description: Operations about users
  - name: emailTicket
    description: Manage email tickets
  - name: ticket
    description: Manage email tickets
  - name: messages
    description: Manage bot messages
  - name: Notification APIs
    description: 
  - name: integrations
    description:
  - name: RCS Campaign
    description: Create templates, send notifications, and schedule campaigns for RCS (Rich Communication Services) messaging 

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key to authorize requests
  headers:  
    Content-Type:
      description: Content type of the request payload
      schema:
        type: string
      example: application/json
    Accept:
      description: Acceptable response content types
      schema:
        type: string
      example: application/json
  schemas:
    UserEvent:
      type: object
      properties:
        id:
          type: string
          description: The ID of the event
        botId:
          type: string
          description: The ID of the bot
        userId:
          type: string
          description: The user's unique ID
        event:
          type: string
          description: The name of the event
        source:
          type: string
          description: The source of the event
        payload:
          type: object
          properties:
            timestamp:
              type: number
              description: The timestamp of the event
            user:
              type: object
              properties:
                city:
                  type: string
                  description: The user's city
                country:
                  type: string
                  description: The user's country code
                firstName:
                  type: string
                  description: The user's first name
                gender:
                  type: string
                  description: The user's gender
                lastName:
                  type: string
                  description: The user's last name
                profileComplete:
                  type: string
                  description: The completeness of the user's profile
                userId:
                  type: string
                  description: The user's unique ID
            createdAt:
              type: string
              format: date-time
              description: The creation timestamp of the event
            updatedAt:
              type: string
              format: date-time
              description: The last update timestamp of the event
    UserEventRequestBody:
      type: object
      properties:
        userId:
          type: string
          description: The user's unique ID
          example: "91828890000"
        eventName:
          type: string
          description: The name of the event
          example: "shopifyNewOrder"
        source:
          type: string
          description: The source of the event, pass `CUSTOM`
          example: "CUSTOM"
        payload:
          type: object
          properties:
            firstName:
              type: string
              description: The user's first name
              example: "Tim"
    UserEventResponseBody:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the response status
          example: "Event created successfully"
        data:
          type: object
          properties:
            id:
              type: string
              description: The ID of the event
            botId:
              type: string
              description: The ID of the bot
            userId:
              type: string
              description: The user's unique ID
            event:
              type: string
              description: The name of the event
            source:
              type: string
              description: The source of the event
            payload:
              type: object
              properties:
                firstName:
                  type: string
                  description: The user's first name
            createdAt:
              type: string
              format: date-time
              description: The creation timestamp of the event
    
    # RCS Messaging Schemas
    RCSError:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          example: INVALID_REQUEST
        message:
          type: string
          example: Request validation failed

    RCSJourney:
      type: object
      properties:
        name:
          type: string
          example: "Flight flow"
        slug:
          type: string
          example: "flight-flow"

    RCSButton:
      type: object
      required: [type, text]
      properties:
        type:
          type: string
          description: "Button type. Allowed: REPLY, DIAL_PHONE, OPEN_URL"
          example: REPLY
        text:
          type: string
          example: "Check flights"
        actionType:
          type: string
          description: "Action type used for REPLY buttons (optional)"
          example: triggerJourney
        journey:
          $ref: '#/components/schemas/RCSJourney'
        phoneNumber:
          type: string
          description: "E.164 format required for DIAL_PHONE"
          example: "+919999999999"
        url:
          type: string
          format: uri
          example: "https://yellow.ai"

    RCSTemplateCreateRequest:
      type: object
      required: [name, type, sender, language, body]
      properties:
        name:
          type: string
          example: "welcome_template"
          description: Unique name of the template
        type:
          type: string
          description: |
            Type of the message format.
            - TEXT: Plain text message
            - RICH: Multimedia-rich message including images, buttons, or cards
          example: TEXT
        sender:
          type: string
          description: RCS sender ID registered for your brand
          example: "YELLOWBRAND"
        language:
          type: string
          description: ISO language code
          example: en
        body:
          type: string
          description: Message body (text or markup)
          example: "Hello {{name}}, welcome to Yellow.ai!"
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/RCSButton'
          description: Optional interactive buttons

    RCSTemplateCreateResponse:
      type: object
      required: [templateId, status]
      properties:
        templateId:
          type: string
          example: "tpl_abc123"
        status:
          type: string
          example: created
        message:
          type: string
          example: Template accepted for review

    RCSUserDetails:
      type: object
      required: [number]
      properties:
        number:
          type: string
          description: Recipient mobile number with country code (in E.164 format).
          example: "+919800000000"

    RCSNotificationPayload:
      type: object
      required: [userDetails, notification]
      properties:
        userDetails:
          $ref: '#/components/schemas/RCSUserDetails'
        notification:
          type: object
          required: [type, sender, templateId]
          properties:
            type:
              type: string
              example: rcsBusinessMessaging
              description: "Notification type. For this API, it should be 'rcsBusinessMessaging'."
            sender:
              type: string
              example: "YELLOWBRAND"
              description: "The sender ID to send the RCS Campaign."
            templateId:
              type: string
              example: "tpl_abc123"
              description: "The unique identifier of the RCS template to be used for the notification."
            metadata:
              type: object
              additionalProperties: true
              description: Optional key/value metadata
              

    RCSNotificationResponse:
      type: object
      properties:
        requestId:
          type: string
          example: "req_456def"
          description: Unique request identifier
        status:
          type: string
          example: accepted
          description: Status of the notification
        details:
          type: object
          additionalProperties: true

    RCSCampaignInfo:
      type: object
      properties:
        campaignMetaData:
          type: object
          properties:
            schedule:
              type: string
              example: "@once"
              description: Campaign execution time, using cron expression or @once for one-time schedule.
            timezone:
              type: string
              example: "Asia/Kolkata"
              description: "Timezone in which the campaign is scheduled."
            executionTime:
              type: string
              description: Campaign execution schedule in cron format (minute hour day month weekday). Example - "25 20 20 6 *"   Runs at 8:25 PM on June 20 every year
        columnsMapping:
          type: object
          additionalProperties: true
        campaignGoalMetaData:
          type: object
          properties:
            type:
              type: string
              example: delivery
              description: "Type of the campaign goal. For this API, it should be 'delivery'."
            validity:
              type: object
              properties:
                unit:
                  type: string
                  example: hours

                value:
                  type: integer
                  example: 24
            statusToTrack:
              type: string
              example: sent
              description: "Status to track for the campaign goal."

    RCSCampaignJobPayload:
      type: object
      properties:
        campaignName:
          type: string
          example: "May RCS Blast"
          description: Unique name of the campaign
        segmentName:
          type: string
          example: "Active Users"
          description: Name of the target audience segment.
        segmentId:
          type: string
          example: "seg_789"
          description: Unique ID of the target audience segment.
        schedule:
          type: string
          example: "@once"
          description: Campaign execution time, using cron expression. Use @once for one-time schedule.
        timezone:
          type: string
          example: "Asia/Kolkata"
        executionTime:
          type: string
          description: Campaign execution schedule in cron format (minute hour day month weekday). Example - "25 20 20 6 *" Runs at 8:25 PM on June 20 every year
        content:
          type: string
          example: "Your RCS message content"
        audienceId:
          type: string
          example: "nLcpq5PLu_eISfjD6ohq5"
        options:
          type: object
          additionalProperties: true
        botId:
          type: string

    RCSCampaignCreateRequest:
      type: object
      required: [botId, name, source, schedule, content]
      properties:
        botId:
          type: string
          example: "bot_123"
          description: Unique ID of the bot
        name:
          type: string
          example: "RCS Campaign May"
          description: Unique name of the campaign
        description:
          type: string
          example: "May RCS Blast"
          description: Description of the campaign
        source:
          type: string
          example: "rcsBusinessMessaging"
          description: Source of the campaign. For this API, it should be 'rcsBusinessMessaging'.
        executionTime:
          type: string
          description: Campaign execution schedule in cron format (minute hour day month weekday). Example - "25 20 20 6 *"   Runs at 8:25 PM on June 20 every year
        segmentId:
          type: string
          description: Unique ID of the target audience segment for the campaign
        segmentName:
          type: string
          description: Name of the target audience segment for the campaign
        templateName:
          type: string
          description: Name of the template to be used for the campaign
        type:
          type: string
          example: "outbound campaign"
          description: Type of the campaign
        recipientColumnName:
          type: string
          example: "phone"
          description: Name of the column containing recipient phone numbers
        schedule:
          type: string
          example: "@once"
          description: Campaign execution time, using cron expression. Use @once for one-time schedule.
        allUsers:
          type: boolean
          default: false
          description: Set to true to send the campaign to all users.
        content:
          type: object
          properties:
            message:
              type: string
              example: "test rcs from yellow"
        info:
          $ref: '#/components/schemas/RCSCampaignInfo'
        jobPayload:
          $ref: '#/components/schemas/RCSCampaignJobPayload'

    RCSCampaignCreateResponse:
      type: object
      properties:
        campaignId:
          type: string
          example: "camp_abc123"
        status:
          type: string
          example: scheduled
        scheduledAt:
          type: string
          format: date-time
          example: "2025-06-20T20:25:00+05:30"

paths:
  '/cdp/api/v1/user':
    post:
      security:
        - ApiKeyAuth: []    
      tags:
        - User
      summary: Add user
      description: Creates a user record in User360. There is a rate limit is 2000 per minute.
      operationId: addUser
      parameters:
        - name: bot
          in: query
          description: The unique ID of the bot associated with the user record.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
               - userId
              properties:
                userId:
                  type: string
                  description: Unique identifier of the user.
                firstName:
                  type: string
                  description: The first name of the user.
                lastName:
                  type: string
                  description: Last name of the user.
                gender:
                  type: string
                  description: Gender of the user.
                country:
                  type: string
                  description: Country of the user.
                city:
                  type: string
                  description: City of the user according to the user's address.
                language:
                  type: string
                  description: Preferred language of the user.
                email:
                  type: string
                  format: email
                  description: Email address of the user.
                phone:
                  type: string
                  description: Phone number of the user with country code.
                lastChannel:
                  type: string
                  description: Recent channel (set up on yellow.ai) where the user had an active session. You can update this property to cover touch-points/channels outside yellow.ai.
                dob:
                  type: string
                  format: date
                  description: Date of birth of the user.
                emailOptin:
                  type: boolean
                  description: Subscription status of the user to emails. Pass `true` to subscribe for emails, else pass `false`.
                smsOptin:
                  type: boolean
                  description: Subscription status of the user to SMS. Pass `true` to subscribe the user to SMS, else pass `false`.
                whatsAppOptin:
                  type: boolean
                  description: WhatsApp subscription status of the user. Pass `true` to subscribe the user to your WhatsApp notifications, else pass `false`.
                tags:
                  type: array
                  items:
                    type: string
                  description: List of groups associated with the user. You can add tags to users manually.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  data:
                    type: object
                    properties:
                      userId:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "12395"
                          propertyType:
                            type: string
                            example: "System"
                      lastName:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "Rohit3"
                          propertyType:
                            type: string
                            example: "System"
                      phone:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "919876543211"
                          propertyType:
                            type: string
                            example: "System"
                      tags:
                        type: object
                        properties:
                          value:
                            type: array
                            items:
                              type: string
                            example:
                              - "tags2"
                          propertyType:
                            type: string
                            example: "System"
                      country:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "IN"
                          propertyType:
                            type: string
                            example: "System"
                      emailOptIn:
                        type: object
                        properties:
                          value:
                            type: boolean
                            example: false
                          propertyType:
                            type: string
                            example: "System"
                      botId:
                        type: object
                        properties:
                          value:
                            type: string
                            example: ""
                        description: Unique ID of the bot associated with the user    
                      id:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "x1632831689374_t4-qyVsPjufdqVfL0ugRM"
                        description: Unique internal ID genetated for the user.
                      updatedAt:
                        type: object
                        properties:
                          value:
                            type: string
                            format: date-time
                            example: "YYYY-MM-DDTHH:mm:ss.sssZ"
                          propertyType:
                            type: string
                            example: "System"
                        description: The date and time of the last update to the user record in the ISO standard format
                      createdAt:
                        type: object
                        properties:
                          value:
                            type: string
                            format: date-time
                            example: "2023-07-17T12:55:06.730Z"
                          propertyType:
                            type: string
                            example: "System"
                        description: The date and time of the record creation in ISO standard format    
                      profileComplete:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "13.04"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
  
  
  '/cdp/api/v1/user/{userId}':
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - User
      summary: Get user details
      description: Retrieve all details of a specific user. To fetch specifc custom or system user properties, use the `properties` param.
      parameters:
        - name: userId
          in: path
          description: The unique identifier for the user.
          required: true
          schema:
            type: string
            example: x1640004486565_vjXfIP8Fmzs275FCuG99l
        - name: bot
          in: query
          description: The unique identifier for the bot.
          required: true
          schema:
            type: string
            example: x1640004486565
        - name: allProperties
          in: query
          description: Pass `true` to fetch all user properties; else, set `false`.
          required: false
          schema:
            type: string
            example: RMEmail,phone            
        - name: properties
          in: query
          description: Use to fetch specific system or custom user properties. A comma-separated list of user properties to fetch. Leave empty to fetch all properties.
          required: false
          schema:
            type: string-enum
            example: RMEmail,phone
        - name: userId
          in: query
          description: Whether to include the `userId` field in the response. Defaults to `yes`.
          required: false
          schema:
            type: string
            enum:
              - yes
              - no
            example: yes
      responses:
        '200':
          description: User properties fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched user successfully
                  data:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        value:
                          type: string
                          example: test@yellow.com
                        propertyType:
                          type: string
                          example: Custom
        '400':
          description: Bad request. Invalid parameters provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid userId or botId.
        '401':
          description: Unauthorized. Invalid or missing API key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized access.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred.
       
    put:
      security:
        - ApiKeyAuth: []    
      tags:
        - User
      summary: Update user
      description: Updates user properties of an existing user. There is a rate limit is 1500 per minute.
      parameters:
        - name: userId
          in: path
          description: The unique ID of the user.
          required: true
          schema:
            type: string
        - name: bot
          in: query
          description: The unique bot ID associated with the user record.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid userId provided
        '404':
          description: User not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the user
                lastName:
                  type: string
                  description: The last name of the user
                phone:
                  type: string
                  description: The phone number of the user
                tags:
                  type: array
                  items:
                    type: string
                  description: An array of tags
                country:
                  type: string
                  description: The country of the user
                emailOptIn:
                  type: boolean
                  description: Indicates whether the user has opted in for email notifications
        
    delete:
      security:
        - ApiKeyAuth: []    
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user. There is a rate limit is 1000 per minute.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The unique ID of the user that needs to be deleted
          required: true
          schema:
            type: string
        - name: bot
          in: query
          description: The unique ID of the bot associated with the user record
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contactDetails:
                    type: object
                    description: Details of the created contact
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details

  /cdp/api/v1/user/create-bulk:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - User
      summary: Add users (Bulk)
      operationId: createBulkUsers
      description: This API allows batch user addition. Each batch can include up to 1000 records and a rate limit of 120 requests per minute. For a smoother experience, it is strongly advised not to utilize the Bulk API for adding individual users
      parameters:
        - name: bot
          in: query
          description: The unique ID of the bot associated with the users.
          required: true
          schema:
            type: string
        - name: uponConflict
          in: query
          description: Specify the conflict resolution strategy when a `userId` is already present in the system. Update the existing user data with the provided information, or if the userId exists, retain the existing user data and ignore the import data.
          required: false
          schema:
            type: string
            enum:
              - UPDATE_EXISTING
              - RETAIN_IMPORTED
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the user.
                lastName:
                  type: string
                  description: Last name of the user.
                gender:
                  type: string
                  description: Gender of the user.
                country:
                  type: string
                  description: Country of the user.
                city:
                  type: string
                  description: City of the user.
                language:
                  type: string
                  description: Preferred language of the user.
                email:
                  type: string
                  format: email
                  description: Email address of the user.
                phone:
                  type: string
                  description: Phone number of the user with country code.
                lastChannel:
                  type: string
                  description: Recent channel (set up on yellow.ai) where the user had an active session. You can update this property to cover touch-points/channels outside yellow.ai.
                dob:
                  type: string
                  format: date
                  description: Date of birth of the user.
                emailOptin:
                  type: boolean
                  description: Subscription status of the user to emails. Pass `true` to subscribe the user to your email notifications, else pass `false`.
                smsOptin:
                  type: boolean
                  description: Subscription status of the user to SMS.  Pass `true` to subscribe the user to your SMS notifications, else pass `false`.
                whatsAppOptin:
                  type: boolean
                  description: WhatsApp subscription status of the user.  Pass `true` to subscribe the user to your WhatsApp notifications, else pass `false`.
                tags:
                  type: array
                  items:
                    type: string
                  description: List of groups associated with the user. You can add tags to users manually.
              example:
                users:
                  - firstName: “T”im
                    userId: "12"
                    lastName: “Ja”mes
                    gender: "Male"
                    country: "India"
                    city: "Bangalore"
                    language: "English"
                    timezone: "Asia/Kolkata"
                    email: “tim@example.com"
                    phone: "919000000000"
                    lastChannel: "WhatsApp"
                    dob: "1990-12-31"
                    emailOptin: true
                    smsOptin: false
                    whatsAppOptin: true
                    tags:
                      - "Premium Customers"
                      - "VIP Members"
                  - firstName: "Tom"
                    userId: "125"
                    lastName: "Smith"
                    gender: "Male"
                    country: "USA"
                    city: "New York"
                    language: "English"
                    timezone: "America/New_York"
                    email: "tom@example.com"
                    phone: "911000000000"
                    lastChannel: "Email"
                    dob: "1985-08-15"
                    emailOptin: true
                    smsOptin: true
                    whatsAppOptin: false
                    tags:
                      - "Subscribers"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 
                  data:
                    type: string
                    description: Unique ID for the bulk creation of users.
                    example: "qnN5xz34haspjpTd1uDVY"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - User
      summary: Get the Status of Bulk Create API
      description: Get the status of the Bulk Create API based on the unique data ID generated
      parameters:
        - name: bot
          in: query
          required: true
          description: The unique ID of the bot associated with the request.
          schema:
            type: string
        - name: id
          in: query
          required: true
          description: The unique `data` ID generated for the `/create-bulk` API
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Details Fetched Successfully"
                  data:
                    type: object
                    properties:
                      comment:
                        type: string
                        example: "finished processing"
                      result:
                        type: object
                        properties:
                          newUsers:
                            type: object
                          conflictedUsers:
                            type: object
                            additionalProperties:
                              type: string
                              description: "Key is the userId, value is the botId"
  '/engagements/audience/update/{audienceID}':
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Engage     
      summary: Update Audience Records
      description: Update specific fields such as tags and call_count for a given audience ID.
      parameters:
        - name: audienceID
          in: path
          required: true
          description: The ID of the audience to update.
          schema:
            type: string
        - name: bot
          in: query
          required: true
          description: The bot ID specific to your environment.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  description: The unique ID of the audience.
                tags:
                  type: array
                  description: Tags to assign to the audience.
                  items:
                    type: string
                  example: ["CONNECTED"]
                call_count:
                  type: integer
                  description: Number of calls associated with the audience.
                  example: 5
      responses:
        '200':
          description: Audience updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Audience updated successfully.
                  updatedFields:
                    type: object
                    properties:
                      tags:
                        type: array
                        items:
                          type: string
                      call_count:
                        type: integer
        '400':
          description: Invalid request or missing parameters.
        '401':
          description: Unauthorized request. Check your API key.

  /audience/delete:
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - Engage    
      summary: Delete Audience Records
      description: Delete one or more audience records by their IDs.
      parameters:
        - name: bot
          in: query
          required: true
          description: The bot ID specific to your environment.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idArray:
                  type: array
                  description: Array of audience record IDs to delete.
                  items:
                    type: string
                audienceId:
                  type: string
                  description: Audience ID linked to the records being deleted.
      responses:
        '200':
          description: Records deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Records deleted successfully.
                  deletedRecords:
                    type: array
                    items:
                      type: string
                      example: record_id_123
        '400':
          description: Invalid request or missing parameters.
        '401':
          description: Unauthorized request. Check your API key.

  /engagements/notifications/v2/push-carousel:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Engage        
      summary: "Trigger WhatsApp Carousel Templates"
      description: "This endpoint triggers a WhatsApp carousel template for a given mobile number."
      parameters:
        - in: query
          name: bot
          schema:
            type: string
          required: true
          description: "The bot ID associated with the template."
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
          description: "API key for authentication."
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: [application/json]
          required: true
          description: "Content type of the request."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userDetails:
                  type: object
                  properties:
                    number:
                      type: string
                      description: "Mobile number to send the template, including the country code."
                  required: [number]
                notification:
                  type: object
                  properties:
                    templateId:
                      type: string
                      description: "The ID of the carousel template to be triggered."
                    type:
                      type: string
                      enum: [whatsapp]
                      description: "Notification type. For this API, it should be 'whatsapp'."
                    sender:
                      type: string
                      description: "The WhatsApp sender number, including the country code."
                    params:
                      type: object
                      properties:
                        cards:
                          type: array
                          items:
                            type: object
                            properties:
                              media:
                                type: object
                                properties:
                                  mediaLink:
                                    type: string
                                    description: "Link to the media content for the carousel card."
                                required: [mediaLink]
                            required: [media]
                      required: [cards]
                  required: [templateId, type, sender, params]
              required: [userDetails, notification]
      responses:
        '200':
          description: "Carousel template successfully triggered."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification sent successfully."
                  status:
                    type: string
                    example: "success"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request payload."
                  status:
                    type: string
                    example: "error"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid API key."
                  status:
                    type: string
                    example: "error"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred on the server."
                  status:
                    type: string
                    example: "error"

  

  '/cdp/api/v1/event':
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Event    
      summary: Create new event
      description: Pushes a new event to User 360. If the userId already existsin User 360, it updates the data; if not, it creates a new user record. There is a rate limit is 6000 per minute.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEventRequestBody'
      parameters:
        - in: query
          name: bot
          required: true
          schema:
            type: string
          description: The ID of the bot
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEventResponseBody'
            
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Event
      summary: Get user events
      description: Retrieve events associated with a specific user.
      parameters:
        - in: query
          name: bot
          schema:
            type: string
          description: The ID of the bot
        - in: query
          name: userId
          required: true
          schema:
            type: string
          description: The unique ID of the user generated internally. This is usually in the format `{botId_userId}`
        - in: query
          name: eventName
          required: false
          schema:
            type: string
          description: The name of the event. Use this parameter to filter results by event name.
        - in: query
          name: offsetTimestamp
          required: false
          schema:
            type: string
          description: The offset timestamp (ISO format) from which to start retrieving events. Use this parameter to paginate through event results.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The maximum number of events to retrieve per request. Use this parameter for result pagination and limiting the response size.          
      responses:
        '200':
          description: Successful response with a list of user events
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the response status
                  data:
                    type: array
                    description: List of user events
                    items:
                      $ref: '#/components/schemas/UserEvent' 
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details

  '/data/messages':
    get:
      security:
        - ApiKeyAuth: []    
      tags: 
        - Messages        
      summary: Get messages
      description: Retrieves messages for a user from the Yellow.ai platform.
      parameters:
        - name: bot
          in: query
          description: The unique ID of the bot associated with the messages.
          required: true
          schema:
            type: string
        - name: uid
          in: query
          description: The unique ID of the user associated with the messages.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of messages to retrieve.
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 100
            default: 100
        - name: offset
          in: query
          description: Number of rows to skip from the top of the results table when fetching data.
          required: false
          schema:
            type: integer
            default: 0
        - name: ticketId
          in: query
          description: Get details of a specific ticket
          required: false
          schema:
            type: string
        - name: source
          in: query
          description: Get tickets from a specific source.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The ID of the message
                        shouldTranslateMessage:
                          type: boolean
                          description: Indicates whether the message should be translated
                        created:
                          type: string
                          format: date-time
                          description: The creation timestamp of the message
                        updated:
                          type: string
                          format: date-time
                          description: The last update timestamp of the message
                        botId:
                          type: string
                          description: The ID of the bot associated with the message
                        uid:
                          type: string
                          description: The ID of the user associated with the message
                        message:
                          type: string
                          description: The content of the message
                        messageType:
                          type: string
                          description: Type of the user associated with the message
                          enum:
                            - AGENT
                            - BOT
                            - USER
                            - NOTIFICATION
                        sessionId:
                          type: string
                          description: The ID of the session associated with the message
                        slug:
                          type: string
                          description: The slug of the message
                        feedback:
                          type: string
                          description: The feedback associated with the message
                        source:
                          type: string
                          description: The source of the message
                        questionId:
                          type: string
                          description: The ID of the question associated with the message
                        medium:
                          type: string
                          description: The medium of the message
                        conversationId:
                          type: string
                          description: The ID of the conversation associated with the message
                        messageTags:
                          type: array
                          items:
                            type: string
                          description: An array of message tags
                        nodeType:
                          type: string
                          description: The type of the node associated with the message



  '/api/ticketing/ticket/send':
    post:
      security:
        - ApiKeyAuth: []    
      tags: 
        - Email Ticket            
      summary: "Send Ticket"
      description: "Creates and sends a ticket"
      parameters:
        - name: "botId"
          in: "query"
          description: "ID of the bot"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                ticketData:
                  type: object
                  description: Contains detailed information about the support ticket.
                  properties:
                    botId:
                      type: string
                      description: Unique identifier for the bot associated with the ticket.
                    contact:
                      type: object
                      description: Bot user associated with the ticket.
                      properties:
                        primaryEmail:
                          type: string
                          description: The primary email address of the user.
                        firstName:
                          type: string
                          description: The first name of the user.
                        lastName:
                          type: string
                          description: The last name of the user.
                    tags:
                      type: array
                      description: List of tags associated with the ticket.
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: Unique ticket identifier.
                    assignedTo:
                      type: string
                      description: Identifier of the agent associated to the  ticket.
                    dueDate:
                      type: string
                      format: date-time
                      description: The deadline by which the ticket should be resolved.
                    priority:
                      type: string
                      description: The urgency level of the ticket (e.g., High, Medium, Low).
                    customFields:
                      type: object
                      description: Additional custom fields for the ticket.
                      properties:
                        h1:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
                              levelName:
                                type: string
                mailData:
                  type: object
                  properties:
                    sender:
                      type: object
                      properties:
                        address:
                          type: string
                    toAddresses:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                    ccAddresses:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                    bccAddresses:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                    subject:
                      type: string
                    message:
                      type: string
      responses:
        '200':
          description: "Ticket created and sent successfully"
        '400':
          description: "Invalid request"

  '/api/ticketing/ticket':
    get:
      security:
        - ApiKeyAuth: []        
      tags: 
        - Email Ticket                    
      summary: Get tickets
      description: |
        Fetches a paginated list of tickets created in the past 30 days. By default, it returns the latest 50 tickets.
      parameters:
       - name: botId
         in: query
         required: true
         schema:
            type: string
         example: x1744276526472
         description: Unique identifier of the AI agent (bot)
       - name: jsonQuery
         in: query
         required: true
         schema:
            type: string
            example: '%7B%22pageNumber%22%3A1%7D'
         description: |
            URL-encoded JSON object specifying pagination parameters.  
            Example decoded value: `{"pageNumber":1}`  
            Note: Only `pageNumber` is supported.      
      responses:
        '200':
          description: A list of tickets retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "ticket_12345"
                        status:
                          type: string
                          example: "open"
                        created_at:
                          type: string
                          format: date-time
                          example: "2024-02-05T10:00:00Z"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      per_page:
                        type: integer
                        example: 50
                      total_pages:
                        type: integer
                        example: 10
                      total_tickets:
                        type: integer
                        example: 500

        '400':
          description: Bad Request — invalid or missing parameters.
          content:
            application/json:
              examples:
                missingBotId:
                  summary: Missing botId
                  value:
                    error: "botId is required"
                    status: 400
                invalidJsonQuery:
                  summary: Invalid JSON in jsonQuery
                  value:
                    error: "Invalid JSON in jsonQuery"
                    status: 400
                missingPagination:
                  summary: Missing pageNumber or size
                  value:
                    error: "pageNumber and size are required"
                    status: 400

        '403':
          description: Forbidden — user not authorized to access the resource.
          content:
            application/json:
              examples:
                missingAuth:
                  summary: Missing or invalid API key
                  value:
                    error: "The user does not have access"
                    status: 403

        '500':
          description: Internal Server Error — something went wrong on the server.



 
  '/integrations/sync/v1/message':
    post:
      security:
        - ApiKeyAuth: []    
      tags: 
        - Integrations   
      summary: Send message/event to bot
      description: Send message or event to a bot and synchronously receive responses.
      parameters:       
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - botId
                - sender
                - data
              properties:
                botId:
                  type: string
                  description: The ID of the bot receiving the message or event
                sender:
                  type: string
                  description: The sender ID of the message
                
                data:
                  type: object
                  description: The payload of the message
                  properties:
                    message:
                      type: string
                      description: The message content (required if sending a message)
                    file: 
                      type: string
                      description: URL of the file to be sent                      
                    image: 
                      type: string
                      description: URL of the image to be sent       
                    video: 
                      type: string
                      description: URL of the video to be sent   
                    event:
                      type: object
                      description: The event data. Required to send event to the bot
                      properties:
                        code:
                          type: string
                          description: The code identifying the event. This is required to send event details to bot
                        data:
                          type: object
                          description: The data associated with the event
                fetchVariables:
                  type: array
                  description: List of variable values to be fetched. (Max 5) (Optional)
                  items:
                   type: string                                                                                                           
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              example:
                success: true
                message: success
                data:
                  messageArray:
                    - message: "Thank you"
                      messageTags: []
                      _id: "65d4708e2274b2"
                  targetLanguage: "en"
                  botId: "x16900024"
                  sender: "896762521951619"

  /api/templates/all:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Engage    
      summary: Get Outbound Templates
      description: Retrieve all active Outbound templates associated with a specified bot ID. These templates can be used to trigger campaigns in Engage.
      operationId: getAllActiveTemplates
      parameters:
        - name: bot
          in: query
          required: true
          description: The unique identifier of the bot whose templates are to be fetched.
          schema:
            type: string
        - name: x-api-key
          in: header
          required: true
          description: API key for authorization.
          schema:
            type: string
      responses:
        '200':
          description: Successful response containing the list of active templates.
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The unique identifier of the template.
                        name:
                          type: string
                          description: The name of the template.
                        status:
                          type: string
                          description: The current status of the template.
                        createdAt:
                          type: string
                          format: date-time
                          description: The creation date of the template.
                required:
                  - templates
        '400':
          description: Bad Request. The request was invalid, possibly due to missing or incorrect parameters.
        '401':
          description: Unauthorized. The API key provided is missing or invalid.
        '404':
          description: Not Found. The specified bot ID does not exist.
        '500':
          description: Internal Server Error. An error occurred on the server side.

  /api/templates/rcsBusinessMessaging/create:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - RCS Campaign
      summary: Create RCS message template
      description: Create an RCS message template for approval. Templates support text body and optional interactive buttons (REPLY, DIAL_PHONE, OPEN_URL).
      operationId: createRcsTemplate
      parameters:
        - name: bot
          in: query
          required: true
          schema:
            type: string
          description: Unique identifier of the AI agent (bot)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RCSTemplateCreateRequest'
            examples:
              basic:
                value:
                  name: "welcome_template"
                  type: "TEXT"
                  sender: "YELLOWBRAND"
                  language: "en"
                  body: "Hello {{name}}, welcome to Yellow.ai!"
                  buttons:
                    - type: "REPLY"
                      text: "Start"
                      actionType: "triggerJourney"
                      journey:
                        name: "Quick Start"
                        slug: "quick-start"
                    - type: "OPEN_URL"
                      text: "Visit"
                      url: "https://yellow.ai"
      responses:
        '201':
          description: Template created and accepted for review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSTemplateCreateResponse'
        '400':
          description: Bad request — validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '401':
          description: Unauthorized — missing or invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'

  /api/engagements/notifications/v2/push-rcs:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - RCS Campaign
      summary: Send RCS notification
      description: Send a notification using a previously approved RCS template.
      operationId: sendRcsNotification
      parameters:
        - name: bot
          in: query
          required: true
          schema:
            type: string
          description: Unique identifier of the AI agent (bot)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RCSNotificationPayload'
            examples:
              basic:
                value:
                  userDetails:
                    number: "+919876543210"
                  notification:
                    type: "rcsBusinessMessaging"
                    sender: "YELLOWBRAND"
                    templateId: "tpl_abc123"
      responses:
        '200':
          description: Notification accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSNotificationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'

  /api/engagements/v2/campaign/create-rcs:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - RCS Campaign
      summary: Create and schedule an RCS campaign
      description: Create and schedule an RCS campaign to target a user segment. Use `@once` to run once. For recurring campaigns use cron expression (minute hour day month weekday).
      operationId: createRcsCampaign
      parameters:
        - name: bot
          in: query
          required: true
          schema:
            type: string
          description: Unique identifier of the AI agent (bot)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RCSCampaignCreateRequest'
            examples:
              basic:
                value:
                  botId: "bot_123"
                  name: "RCS Campaign May"
                  description: "Promotional RCS campaign"
                  source: "rcsBusinessMessaging"
                  executionTime: "25 20 20 6 *"
                  segmentId: "seg_789"
                  segmentName: "Active Users"
                  templateName: "welcome_template"
                  type: "outbound campaign"
                  recipientColumnName: "phone"
                  schedule: "@once"
                  allUsers: false
                  content:
                    message: "test rcs from yellow"
                  info:
                    campaignMetaData:
                      schedule: "@once"
                      timezone: "Asia/Kolkata"
                      executionTime: "25 20 20 6 *"
                    columnsMapping: {}
                    campaignGoalMetaData:
                      type: "delivery"
                      validity:
                        unit: "hours"
                        value: 24
                      statusToTrack: "sent"
                  jobPayload:
                    campaignName: "RCS Campaign May"
                    segmentName: "Active Users"
                    segmentId: "seg_789"
                    schedule: "@once"
                    timezone: "Asia/Kolkata"
                    executionTime: "25 20 20 6 *"
                    content: "Your RCS message content"
                    audienceId: "nLcpq5PLu_eISfjD6ohq5"
                    options: {}
                    botId: "bot_123"
      responses:
        '201':
          description: Campaign created and scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSCampaignCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '409':
          description: Conflict — duplicate campaign or invalid state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RCSError'
