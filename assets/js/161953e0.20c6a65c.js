"use strict";(self.webpackChunkbenthos=self.webpackChunkbenthos||[]).push([[3672],{603905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var i=n(667294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?i.createElement(f,a(a({ref:t},p),{},{components:n})):i.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},940851:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var i=n(487462),o=n(263366),r=(n(667294),n(603905)),a=["components"],s={},l=void 0,c={unversionedId:"platform_concepts/Getting Started/security-auth/oauth",id:"platform_concepts/Getting Started/security-auth/oauth",title:"oauth",description:"Once OAuth role mapping is enabled, the role update UI (Settings \\> Access control) on the Yellow.ai platform will be disabled. Roles can only be updated from the identity provider, and users will be assigned updated roles at the time of login.",source:"@site/docs/platform_concepts/Getting Started/security-auth/oauth.md",sourceDirName:"platform_concepts/Getting Started/security-auth",slug:"/platform_concepts/Getting Started/security-auth/oauth",permalink:"/docs/platform_concepts/Getting Started/security-auth/oauth",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"platform_concepts",previous:{title:"Subscription plans",permalink:"/docs/platform_concepts/Getting Started/upgrade"},next:{title:"YM authentication",permalink:"/docs/platform_concepts/Getting Started/security-auth/ymauth"}},p={},u=[],d={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'---\ntitle: Single sign-on with OAuth & SAML for Cloud Platform\nsidebar_label: SSO with OAuth & SAML\n---\n\n## Overview\n\n### OAuth\n\nOAuth is an authentication protocol that supports Single Sign-On (SSO) and streamlines user access across various applications within an organization. SSO with OAuth enables your users to access the Yellow.ai platform using their existing application login credentials, eliminating the need to re-enter them. This approach enhances security by enabling secure third-party access to user data without exposing login details, providing a seamless and efficient authentication process.\n\n**Benefits of signing in through OAuth:**\n\n* Eliminates the need for direct sharing of login credentials, enhancing security.\n* You can control and limit third-party access to your data.\n* Proves adaptable to various scenarios in large-scale systems.\n\n### SAML\n\nSAML (Security Assertion Markup Language) is an open standard for enabling single sign-on (SSO) across applications and services. It allows users to authenticate once with an Identity Provider (IDP) and gain access to multiple service providers without repeated logins. This improves user experience and enhances security on the Yellow.ai platform by centralizing authentication.\n\n**Benefits of SAML Authentication:**\n\n* Reduces the risk of phishing attacks and password vulnerabilities by eliminating the need for multiple passwords.\n* Enables users to log in once and access multiple applications without interruption.\n* Simplifies and centralizes user management by delegating authentication to a trusted IDP.\n\n### SSO Workflow\n\n![image](https://imgur.com/1ufEPQS.png)\n\n### Basic Terminology\n\n| Term | Description |\n| :------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Resource owner** | The organization that wants to log in to Yellow.ai. |\n| **Client** | Yellow.ai |\n| **Authorization server** | The server issuing the access token, in this case, your application. |\n| **Resource server** | The application that accepts the access token and must verify its validity. |\n| **Redirect URI** | This URL is where the Authorization Server sends the user back after granting permission to the Yellow.ai client. |\n| **Response type** | The type of information the Client (Yellow.ai) expects to receive. For this case, the Response Type will be "code" indicating an Authorization Code. |\n| **Grant type** | Refers to the way an OAuth application gets the access token. In this case, the authorization code flow will be used. |\n| **Scope** | Granular permissions the Client (Yellow.ai) wants, such as access to data or to perform actions. For this case, `openid`, `profile`, and `email` are required scopes. |\n| **Consent** | The Authorization Server verifies with the Resource Owner (user) whether they want to give the Client (Yellow.ai) permission. |\n| **Client ID** | A unique identifier for the client application, provided by the Authorization Server to the Client (Yellow.ai). |\n| **Client secret** | A secret key used for authentication, provided by the Authorization Server to the Client (Yellow.ai). |\n| **Authorization code** | A short-lived temporary code the Client (Yellow.ai) gives the Authorization Server in exchange for an Access Token (valid for one-time use with a maximum lifetime of 10 minutes). |\n| **Access token** | The key used by the Client (Yellow.ai) to communicate with the Resource Server. Similar to a badge or key card, it grants permission to request data or perform actions with the Resource Server on behalf of the Client (Yellow.ai). |\n| **OAuth application** | The entity created by the Authorization Server containing details (such as Client ID, Client Secret, Redirect URL, etc.) corresponding to a specific OAuth client. |\n\n## Configure OAuth Sign-in\n\nTo configure OAuth, follow the steps below:\n\n### Step 1: Set up OAuth in IDP\n\nTo set up OAuth, you need to create an OAuth application on your Authorization Server. Here are the steps:\n\n#### Create an OAuth Application\n\n1.  Log in to your Authorization Server.\n2.  Click on the "Applications" or "OAuth Applications" tab.\n3.  Click on the "Create Application" or "New Application" button.\n4.  Fill in the required information, such as:\n    * Application name\n    * Application description\n    * Redirect URI (the URL where the user will be redirected after authorization)\n    * Client ID (a unique identifier for your application)\n    * Client secret (a secret key used for authentication)\n5.  Choose the authorization flow that you want to use (e.g., authorization code flow).\n6.  Choose the scopes that you want to request (e.g., `openid`, `profile`, `email`).\n7.  Click on the "Create" or "Save" button to create the application.\n\n#### Configure the OAuth Application\n\n1.  Note down the Client ID and Client secret. You will need these values to configure OAuth in your Yellow.ai application.\n2.  Configure the Redirect URI to point to the URL where you want the user to be redirected after authorization.\n3.  Configure the scopes to request the necessary permissions from the user.\n4.  Whitelist the following redirect URLs on your IDP\'s OAuth app:\n    * `https://cloud.yellow.ai/api/sso/oauth/handle-redirect`\n    * `https://app.yellow.ai/api/sso/oauth/handle-redirect`\n\n#### Example Configuration\n\nHere is an example of how you might configure the OAuth application:\n\n| Field | Value |\n| :-------------------- | :------------------------------------ |\n| Application name | My Yellow.ai Application |\n| Application description | This is my Yellow.ai application |\n| Redirect URI | `https://my-yellow-ai-app.com/callback` |\n| Client ID | `client-id-123456` |\n| Client secret | `client-secret-123456` |\n| Authorization flow | Authorization code flow |\n| Scopes | `openid`, `profile`, `email` |\n\nSteps to **retrieve details** from a few **common identity providers** are outlined below:\n\n| Identity provider | Values required to set up SSO for Yellow.ai | Step-by-step guide |\n| :---------------- | :------------------------------------------ | :----------------- |\n| **Okta** | Okta domain <br/> Client ID <br/> Client Secret | [Click here](https://developer.okta.com/docs/guides/implement-oauth-for-okta/main/#create-an-oauth-2-0-app-in-okta) |\n| **Red Hat** | Realm <br/> Client ID | [Click here](https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.0/html/server_administration_guide/clients#oidc_clients) |\n| **Google** | Client ID <br/> Client Secret | [Click here](https://support.google.com/cloud/answer/6158849?hl=en) <br/> <br/> **Note**: Select **`openid`**, **`userinfo.email`**, and **`userinfo.profile`** under scopes on the [Create Consent Screen](https://console.cloud.google.com/apis/credentials/consent?pli=1). |\n| **Microsoft Azure AD** | Client ID <br/> Client Secret <br/> Tenant ID <br/> Tenant Domain | <details> <summary>**Click here**</summary><div> 1. Sign in to Azure AD. Click on **App Services** and select **Manage Azure Active Directory**. <br/> <br/> 2. In the left navigation, go to **App registrations** and click **New registration**. <br/> <br/> 3. On the registration page, provide application details. Choose **web** as the Redirect URI and input the redirect URLs. <br/> <br/> 4. Click **Register**. Azure AD will assign a unique Application ID (Client ID) to your application. Copy the Application ID and Directory ID (Tenant ID). <br/> <br/> 5. Navigate to **Certificates & Secrets**, click **New Client Secret**. Enter a description, set expiration, and click **Add**. This will be your Client Secret key. </div> </details> |\n| **SAML integration** | IDP Name <br/> IDP description <br/> IDP login URL <br/> Entity ID <br/> Email domain <br/> IDP Certificate (in Certificates) | |\n\nWatch this video on how to configure your identity provider (**Microsoft Azure AD**) and fetch details for Yellow.ai SSO configuration:\n\n<center><iframe width="560" height="315" src="https://www.youtube.com/embed/VmhHpo5FeYI?si=CmNdYqjbtM2NJ38E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></center>\n\n:::note\nIf your identity provider isn\'t configured in Yellow.ai for SSO, share OAuth details directly with [Yellow.ai\'s support team](mailto:support@yellow.ai).\n:::\n\n#### Configure Okta for SAML Integration with Yellow.ai\n\nTo enable Single Sign-On (SSO) using Okta, follow the steps below to configure your Okta application with the appropriate SAML settings required by Yellow.ai.\n\n##### Prerequisites\n\n* Admin access to your Okta dashboard\n* SAML configuration details provided by Yellow.ai, including:\n    * **Single Sign-On (SSO) URL**\n    * **Relay State** (optional)\n\n#### Step 1: Access the Okta Admin Console\n\n1.  Sign in to your Okta Admin Console.\n2.  From the left sidebar, navigate to **Applications**.\n\n#### Step 2: Create or Select an App\n\n##### If no app is configured yet:\n\n1.  Click **Create App Integration**.\n2.  Choose **SAML 2.0** as the sign-in method.\n3.  Click **Next**.\n\n##### If an app is already available:\n\n* Select the existing application you want to configure for Yellow.ai.\n\n#### Step 3: Configure SAML Settings\n\n##### When creating an app\n\n1.  Enter a recognizable **App Name** (e.g., *Yellow.ai Integration*).\n2.  Upload an optional logo if needed, then click **Next**.\n3.  In **Single sign-on URL**, enter the URL provided by Yellow.ai (`https://cloud.yellow.ai/api/sso/oauth/handle-redirect`).\n4.  **Check** the option:\n    **\u2714 Use this for Recipient URL and Destination URL**\n5.  In **Default Relay State**, paste the value provided by Yellow.ai (if available).\n\n    ![](https://cdn.yellowmessenger.com/assets/yellow-docs/editsaml.png)\n\n6.  In **Attribute statements**, add *Firstname* and *Email* attributes.\n\n    ![](https://i.ibb.co/35jGCd3h/image-13.png)\n\n##### When updating an existing app\n\nIf your Okta app is already set up:\n\n1.  Go to **Applications** and select the relevant app.\n2.  Under the **General** tab, click **Edit** and update the **Single sign-on URL** with the Yellow.ai URL.\n3.  Navigate to the **Sign On** tab and click **Edit**.\n4.  Replace the **Default Relay State** with the value shared by Yellow.ai.\n\n    ![](https://cdn.yellowmessenger.com/assets/yellow-docs/okta.png)\n\n#### Step 4: Save the changes in Okta.\n\n---\n\n### Step 2: Share OAuth Setup Details\n\nOnce you have set up your IDP, share the following details (fetched from your identity provider) with our support team at [support@yellow.ai](mailto:support@yellow.ai):\n\n| Field | Description |\n| :---------------- | :--------------------------------------------------------------------------------------------------------- |\n| **Email** | Your email address associated with the platform. |\n| **API Version** | The version of the OAuth API being used. Ensures compatibility between the platform and the OAuth service. |\n| **Scope** | The extent of access requested. Specifies resources or actions the application seeks permission to access. |\n| **Domain** | The domain name configured for OAuth, used to identify and access the platform. |\n| **Client ID** | A unique identifier assigned by the OAuth provider to recognize and authorize the application. |\n| **Tenant ID** | Identifies the instance or organization within the OAuth provider, relevant for multi-tenant systems. |\n| **Auth URL** | URL where users are redirected for authentication and authorization. |\n| **Token URL** | URL where the platform obtains the OAuth access token after user authentication. |\n| **Token scope** | Defines the level of access the access token has. |\n| **User Info URL** | URL to retrieve additional information about the authenticated user. |\n| **Client Secret** | A secret known only to the application and the OAuth provider for authentication during token requests. |\n\nAfter verifying your details, SSO will be enabled for your domain by the Yellow.ai team.\n\n### Step 3: Sign in Using OAuth\n\n1.  Log in to `cloud.yellow.ai`.\n2.  Enter the domain name configured for OAuth by the Yellow.ai support team. Click the **Sign with OAuth** button.\n    ![image](https://imgur.com/OJSsVu6.png)\n3.  You will be redirected to the third-party tool, where you can log in using its credentials to access the Yellow.ai platform.\n    ![image](https://imgur.com/aUpX9WM.png)\n\n### Step 4: Create Your Bot\n\nOnce OAuth is enabled, [create a bot](https://docs.yellow.ai/docs/platform_concepts/Getting%20Started/createfirstbot). In the URL, locate and copy the `botId` (separate for live/production). This `botId` is required for providing access and assigning roles.\n\n![image](https://imgur.com/TDLTqpA.png)\n\n---\n\n## Role-based Access Through OAuth\n\nThe Yellow.ai platform supports various user roles, such as developer, agent, and admin. You can configure different roles within your OAuth app and assign users to each role as per your requirement.\n\nTo enable role-based access for your OAuth setup, follow these steps:\n\n> **Prerequisite:** Configure OAuth sign-in and fetch your bot ID.\n\n### Step 1: Add User Roles in IDP\n\nAdd roles in your respective identity provider app. The following are the **supported user roles** on the Yellow.ai platform:\n\n* **Admin** (Bot admin)\n* **Agent** (Inbox agent)\n* **Developer** (Developer)\n* **InsightsUser** (Insights user)\n* **EchoAdmin** (Inbox admin)\n* **Approver**\n* **Tester**\n* **Database** (Database viewer)\n* **EngagementAdmin** (Engage admin)\n* **EngagementUser** (Engage viewer)\n\n:::note\nThe **Super admin** role is automatically created and assigned to the primary email address of the bot when the bot is created. It cannot be assigned through role mapping or the Yellow.ai UI.\nLearn more about other user roles [here](https://docs.yellow.ai/docs/platform_concepts/Getting%20Started/add-bot-collaborators#user-roles-and-access).\n:::\n\n**Syntax to add user roles in the identity provider app**: `botId.{role}`\n> **Example**: `x1599503999999.admin`\n\n**Syntax to provide table and read/write access to database users:**\n\n* **For App and Cloud (legacy tables)**: `botId.database.{tableName}.{accessType}`\n* **For Cloud (v2 tables)**: `botId.database.{tableName}:v2.{accessType}`\n\n:::info\n`accessType` can have one of the following values:\n* `read` for viewing the respective `tableName`. Ex: `x1599503999999.database.feedback.read`, `x1599503999999.database.users.write`\n* `write` for performing editing operations on the respective `tableName`. Ex: `x1599503999999.database.users:v2.read`, `x1599503999999.database.feedback:v2.write`\n:::\n\n### Step 2: Assign Users to Roles in IDP\n\nOnce the roles are added to your IDP, you can assign users to each role. Steps to add user roles differ for each identity provider; follow the steps mentioned by the provider itself. For example, [this guide is for Microsoft Azure AD](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps).\n\nThe following video demonstrates how to assign users to a user role in Microsoft Azure AD.\n\n<iframe width="560" height="315" src="https://www.youtube.com/embed/yBu2HbQDuJA?si=qZJ2RP-t1QbevrNp" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>\n\n:::note\nIf your identity provider isn\'t configured in Yellow.ai for SSO, share OAuth details directly with [Yellow.ai\'s support team](mailto:support@yellow.ai).\n:::\n\n### Step 3: Share User Role Details with Yellow.ai\n\nShare the following information with the support team at `support@yellow.ai`:\n\n* **OAuth details** if the identity provider is not configured in Yellow.ai for SSO.\n* **Roles or groups** created in user details (retrievable on Yellow.ai platform through the `/userinfo` endpoint). Also, share the **key** associated with passing role values. Refer to the legend below for the correct role attribute based on your identity provider:\n\n| Identity Provider Type | Role Attribute |\n| :--------------------- | :------------- |\n| Azure Active Directory | Roles |\n| Okta | Groups |\n| Auth0 | As configured on the identity provider (dynamic value) |\n| Ping Identity | As configured on the identity provider (dynamic value) |\n\n#### Testing What User Details Are Retrieved from Your OAuth Using the `/userinfo` Endpoint\n\nTo know what user details are retrieved by the SSO, make an API request to the GET `/userinfo` API.\n\nThe JSON response includes the following data: `email`, `roleAttribute`, and `given_name`. If a user is assigned to multiple roles across various AI agents, you will observe the list of role attributes along with their associated bots presented as an array within the `roleAttribute` field, as demonstrated in the following response.\n\n```json\n{\n  "email": "something@domain.com",\n  "family_name": "Steve",\n  "given_name": "Smith",\n  "roleAttribute": ["x1597777777777.admin", "x1597777777777.agent", "x1607777777777.admin", "x1607777777777.developer"]\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Once OAuth role mapping is enabled, the role update UI (Settings ",">"," Access control) on the Yellow.ai platform will be disabled. Roles can only be updated from the identity provider, and users will be assigned updated roles at the time of login.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"")))}h.isMDXComponent=!0}}]);