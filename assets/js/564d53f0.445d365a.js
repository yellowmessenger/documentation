"use strict";(self.webpackChunkbenthos=self.webpackChunkbenthos||[]).push([[37340],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},83519:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"platform_concepts/studio/build/nodes/action-nodes-overview/variables-node","title":"Variables node","description":"Variable node allows you to assign static values or capture dynamic inputs during AI agent conversation and store them for later use within the conversational flow. It acts as a memory unit within the conversation, enabling you to retrieve, update, or reference information at different stages of the flow. For more detailed information on variables, click here.","source":"@site/docs/platform_concepts/studio/build/nodes/action-nodes-overview/variables-node.md","sourceDirName":"platform_concepts/studio/build/nodes/action-nodes-overview","slug":"/platform_concepts/studio/build/nodes/action-nodes-overview/variables-node","permalink":"/docs/platform_concepts/studio/build/nodes/action-nodes-overview/variables-node","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Variables node","sidebar_label":"Variables"},"sidebar":"platform_concepts","previous":{"title":"Verify OTP","permalink":"/docs/platform_concepts/studio/build/nodes/action-nodes-overview/verify-otp"},"next":{"title":"Logic","permalink":"/docs/platform_concepts/studio/build/nodes/logic-nodes"}}');var o=t(74848),i=t(28453);const r={title:"Variables node",sidebar_label:"Variables"},a=void 0,l={},c=[];function d(e){const n={a:"a",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Variable node allows you to assign static values or capture dynamic inputs during AI agent conversation and store them for later use within the conversational flow. It acts as a memory unit within the conversation, enabling you to retrieve, update, or reference information at different stages of the flow. For more detailed information on variables, click ",(0,o.jsx)(n.a,{href:"https://docs.yellow.ai/docs/platform_concepts/studio/build/bot-variables",children:"here"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Variable node is used when you need to store and reuse data throughout the conversation."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Use case"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User data storage"}),": Stores user inputs like names, emails, or selections, which can be used across multiple flows."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"API response handling"}),": Stores the response of an API call (example, saving order status) for reference in subsequent steps."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Session management"}),": Using the Variable node to store session-related data like timestamps or flags that track user behavior within the flow."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Configure Variable node"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add the Variable node where you need to store or manage data in your bot\u2019s flow."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://imgur.com/4v80zZ5.png",alt:""})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://docs.yellow.ai/docs/platform_concepts/studio/build/bot-variables#create-a-variable",children:"Create a variable name"})," and assign it either a static value or a dynamic value fecthed from user input, another node, or an API response."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Once the value is stored, reference it in other nodes by using the variable name. You can update the variable's value at any point by reassigning it with new value."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"How to configure Static value"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Scenario:"})," A chatbot for a retail store provides information about store hours."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'The static value "9 AM" is predefined and stored in the Variable node during the flow creation. This value will not change unless manually updated in the bot flow.'}),"\n",(0,o.jsx)(n.li,{children:'When the user asks, "What time do you open?", the bot retrieves the stored value ("9 AM") from the Variable node.'}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Refer to the following GIF to see how to store the static value:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://imgur.com/CefS8fZ.gif",alt:""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"How to configure Dynamic value"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Scenario:"})," A chatbot collects and stores user information like name and email for future reference."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use a Variable at each point where user input is collected (example, name, email)."}),"\n",(0,o.jsx)(n.li,{children:"Assign each variable a unique name (example, userName, userEmail)."}),"\n",(0,o.jsx)(n.li,{children:"The value is updated dynamically based on the user\u2019s input, and can be used later in the conversation or for follow-up actions like sending emails or confirming details."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Refer to the following GIF to see how to store the dynamic value:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://imgur.com/yVr5s9j.gif",alt:""})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);