"use strict";(self.webpackChunkbenthos=self.webpackChunkbenthos||[]).push([[63816],{28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>d});var t=n(96540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}},83894:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"platform_concepts/appConfiguration/livechat-integration","title":"Live Chat Integration on app.yellow.ai","description":"This integration will allow the customers who are using bots on app.yellow.ai to use the updated live chat integration on cloud.yellow.ai.","source":"@site/docs/platform_concepts/appConfiguration/livechat-integration.md","sourceDirName":"platform_concepts/appConfiguration","slug":"/platform_concepts/appConfiguration/livechat-integration","permalink":"/docs/platform_concepts/appConfiguration/livechat-integration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Live Chat Integration on app.yellow.ai","sidebar_label":"Live Chat"},"sidebar":"platform_concepts","previous":{"title":"Stripe Payment","permalink":"/docs/platform_concepts/appConfiguration/stripe"},"next":{"title":"Enable cloud Integration in the App platform","permalink":"/docs/platform_concepts/appConfiguration/exposing-integration-to-app"}}');var i=n(74848),r=n(28453);const a={title:"Live Chat Integration on app.yellow.ai",sidebar_label:"Live Chat"},d=void 0,c={},l=[{value:"1. Use cases",id:"1-use-cases",level:2},{value:"1.1 Amazon connect live agent",id:"11-amazon-connect-live-agent",level:3},{value:"1.2 Avaya Live Agent",id:"12-avaya-live-agent",level:3},{value:"1.3 Custom Live Agent",id:"13-custom-live-agent",level:3},{value:"1.4 Freshchat Live Agent",id:"14-freshchat-live-agent",level:3},{value:"1.5 Kapture CRM Live Agent",id:"15-kapture-crm-live-agent",level:3},{value:"1.6 Locobuzz Live Agent",id:"16-locobuzz-live-agent",level:3},{value:"1.7 Genesys Live Agent",id:"17-genesys-live-agent",level:3},{value:"1.8 Genesys Cloud Live Agent",id:"18-genesys-cloud-live-agent",level:3},{value:"1.9 Intercom Live Agent",id:"19-intercom-live-agent",level:3},{value:"1.10 Nice Incontact Live Agent",id:"110-nice-incontact-live-agent",level:3},{value:"1.11 Talishma Live Agent",id:"111-talishma-live-agent",level:3},{value:"1.12 Salesforce Live Agent",id:"112-salesforce-live-agent",level:3},{value:"2. Configuration",id:"2-configuration",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"This integration will allow the customers who are using bots on app.yellow.ai to use the updated live chat integration on cloud.yellow.ai."}),"\n",(0,i.jsx)(s.h2,{id:"1-use-cases",children:"1. Use cases"}),"\n",(0,i.jsx)(s.p,{children:"The following are the use-cases of this integration:"}),"\n",(0,i.jsx)(s.h3,{id:"11-amazon-connect-live-agent",children:"1.1 Amazon connect live agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect with an Amazon Connect Live Agent, use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n    app.raiseTicketForThirdPartyLiveChat({\n             issue: "Test Issue",\n             contact: {\n                 phone: "9870000000",\n                 name: "Raj",\n                 email: "Test@email.com"\n               },\n           amazonConnectLiveAgentCustomFields: {customFields: {test: \u201cyes\u201d}}\n    }).then((ticketData) => {\n       app.log(ticketData, "ticketData");\n       // Display appropriate message based on the ticketData\n    }).catch((error) => {\n       app.log(error, \'error\');\n       //Error handler\n    });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"amazonConnectLiveAgentCustomFields"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"{customFields: {test: \u201cyes\u201d}}"})}),(0,i.jsx)(s.td,{children:"Object"}),(0,i.jsxs)(s.td,{children:["Custom key: value pairs associated with the end user required to raise a ticket. You need to pass the value of this key as ",", in case no key: pairs are required."]})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsxs)(s.admonition,{type:"note",children:[(0,i.jsx)(s.mdxAdmonitionTitle,{}),(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the amazon connect create ticket API"})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "TicketId is not created and transferring the control back to the bot",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the amazon connect create ticket API"})}),"\n",(0,i.jsx)(s.h3,{id:"12-avaya-live-agent",children:"1.2 Avaya Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect with an Avaya Live Agent, use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\n          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   }\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields in the that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'{\n   "assignedTo": true,\n   "success": true,\n   "message": "Agent is available and ticket is assigned to the agent",\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n\n'})}),"\n",(0,i.jsxs)(s.admonition,{type:"note",children:[(0,i.jsx)(s.mdxAdmonitionTitle,{}),(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the avaya create ticket API"})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "Agent availability is false and hence not assigned to any agent.",\n   "ticketInfo": "{{apiresponse}}"\n}\n\n'})}),"\n",(0,i.jsxs)(s.admonition,{type:"note",children:[(0,i.jsx)(s.mdxAdmonitionTitle,{}),(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the avaya create ticket API"})]}),"\n",(0,i.jsx)(s.h3,{id:"13-custom-live-agent",children:"1.3 Custom Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect with a Custom Live Agent, use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\n          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   },\n                  category: "Sales",\n                  priority: "MEDIUM",\n                  customLiveAgentCustomFields: {customFields: {test: \u201cyes\u201d}}\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields in the that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"category"}),(0,i.jsx)(s.td,{children:"Sales"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Category under which the ticket will be created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"priority"}),(0,i.jsx)(s.td,{children:"MEDIUM"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Priority of the ticket to be created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"customLiveAgentCustomFields"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"{customFields: {test: \u201cyes\u201d}}"})}),(0,i.jsx)(s.td,{children:"Object"}),(0,i.jsxs)(s.td,{children:["Custom key",":value"," pairs associated with the end user required to raise a ticket. You need to pass the value of this key as ",", in case no key",":pairs"," are required."]})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\n{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the custom live agent create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "Agent is unavailable to chat with the end user, hence transferring the control back to the bot.",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{title:"apiresponse represents the raw response from the custom live agent create ticket API",type:"note"}),"\n",(0,i.jsx)(s.h3,{id:"14-freshchat-live-agent",children:"1.4 Freshchat Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to a Freshchat Live Agent, please use this code-snippet:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'   app.raiseTicketForThirdPartyLiveChat({\n        issue: "Test Issue",\n       contact: {\n            phone: "9870000000",\n            name: "Raj",\n            email: "Test@email.com"\n            },\n            assignedGroupId: "test-group",\n            freshChatUserId: "3554-cbcbc-dchchc",\n            freshChatUniqueIdentifier: "testInfo",\n            properties: [],\n            freshChatChannelId: "abce-ddede-eded-3454"\n   }).then((ticketData) => {\n      app.log(ticketData, "ticketData");\n      // Display appropriate message based on the ticketData\n   }).catch((error) => {\n      app.log(error, \'error\');\n      //Error handler\n   });\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields in the that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"assignedGroupId"}),(0,i.jsx)(s.td,{children:"Sales"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Category under which the ticket will be created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"priority"}),(0,i.jsx)(s.td,{children:"3554-cbcbc-dchchc"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Freshchat groupId to which the ticket should be assigned. The default value \u201c\u201d should be passed for this."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"freshChatUserId"}),(0,i.jsx)(s.td,{children:"test-group"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Freshchat userId of the user, this is passed if the same ticket needs to be re-opened for the same user. The default value \u201c\u201d should be passed for this."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"freshChatUniqueIdentifier"}),(0,i.jsx)(s.td,{children:"testInfo"}),(0,i.jsx)(s.td,{children:"Object"}),(0,i.jsx)(s.td,{children:"A unique identifier that will reflect as referenceId in the freshchat agent portal if passed. The default value \u201c\u201d should be passed for this."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"properties"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"[{key:\u201dHash\u201d, value: \u201cYes\u201d} ]"})}),(0,i.jsx)(s.td,{children:"Array"}),(0,i.jsx)(s.td,{children:"Custom properties that can be passed on while creating a ticket."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"freshChatChannelId"}),(0,i.jsx)(s.td,{children:"abce-ddede-eded-3454"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsxs)(s.td,{children:["This",(0,i.jsx)(s.a,{href:"https://app.swaggerhub.com/apis-docs/Freshchat/freshchat-api/2.0.0#/Channel%20API/getAllChannels",children:" API"})," needs to be called from Postman, which in turn will fetch the list of channel IDs associated with that Freshchat account and confirms the client's authorization to access that account."]})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the freshchat live agent create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:"Sample response in case of failure:-"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "Agent is unavailable to chat with the end user, hence transferring the control back to the bot.",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.p,{children:"::: note\napiresponse represents the raw response from the freshchat live agent create ticket API\n:::"}),"\n",(0,i.jsx)(s.h3,{id:"15-kapture-crm-live-agent",children:"1.5 Kapture CRM Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to a Kapture CRM Live Agent, please use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   }\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\n{\n   "assignedTo": true,\n   "success": true,\n   "message": "Agent is available and ticket is assigned to the agent",\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the kapture crm create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "Agent availability is false and hence not assigned to any agent.",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the kapture crm create ticket API"})}),"\n",(0,i.jsx)(s.h3,{id:"16-locobuzz-live-agent",children:"1.6 Locobuzz Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to a Locobuzz Live Agent, please use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   },\n                  category: "Sales",\n                  priority: "MEDIUM",\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"category"}),(0,i.jsx)(s.td,{children:"Sales"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Category under which the ticket will be created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"priority"}),(0,i.jsx)(s.td,{children:"MEDIUM"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Priority of the ticket to be created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"sentiment"}),(0,i.jsx)(s.td,{children:"Happy"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"User sentiment. Default value to be passed for this key is \u201c\u201d."})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the locobuzz live agent create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "Agent is unavailable to chat with the end user, hence transferring the control back to the bot.",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the locobuzz live agent create ticket API"})}),"\n",(0,i.jsx)(s.h3,{id:"17-genesys-live-agent",children:"1.7 Genesys Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to a Genesys Live Agent, please use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   },\n               genesysCustomFields: {customFields: {test: \u201cyes\u201d}}\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n```s\n\nThis table consists of sample values, data types and descriptions for all the fields that need to be filled.\n\n\n| Field name | Sample value | Data type |Description|\n| -------- | -------- | -------- |---------|\n| issue     | Test description    | String     |The subject/topic/reason why the ticket is created.\nphone| 9870000000 | String |Mobile number of the end user.\nemail| test@gmail.com |String| Email address of the end user.\nname| Rajesh| String|Name of the end user.|\ngenesysCustomFields|{customFields: {test: \u201cyes\u201d}}|Object|Custom key:value pairs associated to the end user required to raise a ticket. You need to pass the value of this key as {}, in case no key:pairs are required.\n\n\n**Sample response in case of success**\n```json\n{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the genesys create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "TicketId is not created and transferring the control back to the bot",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from genesys create ticket API"})}),"\n",(0,i.jsx)(s.h3,{id:"18-genesys-cloud-live-agent",children:"1.8 Genesys Cloud Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to a Genesys Cloud Live Agent, please use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   },\n               genesysCloudCustomFields: {customFields: {test: \u201cyes\u201d}}\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"genesysCloudCustomFields"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:" {customFields: {test: \u201cyes\u201d}}"})}),(0,i.jsx)(s.td,{children:"Object"}),(0,i.jsxs)(s.td,{children:["Custom key",":value"," pairs associated to the end user required to raise a ticket. You need to pass the value of this key as ",", in case no key",":pairs"," are required."]})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\n{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the genesys cloud create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\n{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "TicketId is not created and transferring the control back to the bot",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from genesys cloud create ticket API"})}),"\n",(0,i.jsx)(s.h3,{id:"19-intercom-live-agent",children:"1.9 Intercom Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to an Intercom Live Agent, please use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   },\n               intercomLiveAgentCustomFields: {customFields: {test: \u201cyes\u201d}}\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"intercomLiveAgentCustomFields"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"{customFields: {test: \u201cyes\u201d}}"})}),(0,i.jsx)(s.td,{children:"Object"}),(0,i.jsxs)(s.td,{children:["Custom key",":value"," pairs associated to the end user required to raise a ticket. You need to pass the value of this key as ",", in case no key",":pairs"," are required."]})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\n{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the intercom create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "TicketId is not created and transferring the control back to the bot",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the intercom create ticket API"})}),"\n",(0,i.jsx)(s.h3,{id:"110-nice-incontact-live-agent",children:"1.10 Nice Incontact Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to a Nice Incontact Live Agent, please use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   }\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the nice-incontact create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "TicketId is not created and transferring the control back to the bot",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{title:"apiresponse represents the raw response from the nice-incontact create ticket API",type:"note"}),"\n",(0,i.jsx)(s.h3,{id:"111-talishma-live-agent",children:"1.11 Talishma Live Agent"}),"\n",(0,i.jsx)(s.p,{children:"To connect to a Talishma Live Agent, please use this code-snippet"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'          app.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   }\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsx)(s.p,{children:"This table consists of sample values, data types and descriptions for all the fields that need to be filled."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"issue"}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject/topic/reason why the ticket is created."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"phone"}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"email"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the end user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"name"}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the end user."})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the talishma create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "TicketId is not created and transferring the control back to the bot",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsxs)(s.admonition,{type:"note",children:[(0,i.jsx)(s.mdxAdmonitionTitle,{}),(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the talishma create ticket API"})]}),"\n",(0,i.jsx)(s.h3,{id:"112-salesforce-live-agent",children:"1.12 Salesforce Live Agent"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'\napp.raiseTicketForThirdPartyLiveChat({\n                 issue: "Test Issue",\n                 contact: {\n                     phone: "9870000000",\n                     name: "Raj",\n                     email: "Test@email.com"\n                   },\n                   salesforceLiveChatCustomFields: [],\n                   salesforceLiveChatCustomEntities: [],\n                   salesforceLiveChatAgentId: "",\n                   salesforceLiveChatAgentAssignedMessage: "",\n                   salesforceLiveChatVisitorLanguage: "English",\n                   salesforceLiveChatQueuePositionMessage: "",\n                   salesforceLiveChatUpdatedQueuePositionMessage: "",\n                   salesforceLiveChatAgentTransferredMessage: "",\n                   salesforceLiveChatEstimatedWaitTimeMessage: "",\n                   salesforceLiveChatDisplayAgentName: true,\n                  salesforceLiveChatIdleTimeWarningMessage: \u201c\u201d,\n                  salesforceLiveChatIdleTimeTimeoutMessage: \u201c\u201d,\n                  salesforceLiveChatConnectionFailureMessage: \u201c\u201d,\n                  salesforceLiveChatAgentDisconnectMessage: \u201c\u201d,\n                  salesforceLiveChatAgentTimeoutMessage: \u201c\u201d\n       }).then((ticketData) => {\n           app.log(ticketData, "ticketData");\n           // Display appropriate message based on the ticketData\n       }).catch((error) => {\n           app.log(error, \'error\');\n           //Error handler\n       });\n'})}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field name"}),(0,i.jsx)(s.th,{children:"Sample value"}),(0,i.jsx)(s.th,{children:"Data type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"issue"})}),(0,i.jsx)(s.td,{children:"Test description"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The subject, topic, and reason for creating the ticket."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"phone"})}),(0,i.jsx)(s.td,{children:"9870000000"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Mobile number of the user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"email"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"mailto:test@gmail.com",children:"test@gmail.com"})}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Email address of the user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:"Rajesh"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Name of the user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatCustomFields"})}),(0,i.jsx)(s.td,{children:"See below"}),(0,i.jsx)(s.td,{children:"Array"}),(0,i.jsx)(s.td,{children:"The details provided by the user before initiating the chat."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatCustomEntities"})}),(0,i.jsx)(s.td,{children:"See below"}),(0,i.jsx)(s.td,{children:"Array"}),(0,i.jsxs)(s.td,{children:["The records are created or searched based on the enabled ",(0,i.jsx)(s.a,{href:"https://developer.salesforce.com/docs/atlas.en-us.live_agent_rest.meta/live_agent_rest/live_agent_rest_data_types.htm#EntityFieldMaps",children:"EntityFieldsMaps"}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatAgentId"})}),(0,i.jsx)(s.td,{children:"0055g00000HEbLD"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"The agentId required to enable the sticky agent feature."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatAgentAssignedMessage"})}),(0,i.jsxs)(s.td,{children:["You are now connected to ",(0,i.jsx)(s.code,{children:"liveAgent"}),"."]}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsxs)(s.td,{children:["Message shown to the user after an agent is assigned. Use ",(0,i.jsx)(s.code,{children:"`liveAgent`"})," to display the agent's name."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatVisitorLanguage"})}),(0,i.jsx)(s.td,{children:"English"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Language preferred by the user."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatQueuePositionMessage"})}),(0,i.jsxs)(s.td,{children:["Your queue position is ",(0,i.jsx)(s.code,{children:"position"})]}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsxs)(s.td,{children:["Message shown when the ticket is in queue. Use ",(0,i.jsx)(s.code,{children:"`position`"})," to display the queue number."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatUpdatedQueuePositionMessage"})}),(0,i.jsxs)(s.td,{children:["Your current queue position is ",(0,i.jsx)(s.code,{children:"position"})]}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Message shown when queue position changes."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatAgentTransferredMessage"})}),(0,i.jsxs)(s.td,{children:["Your chat has been transferred to ",(0,i.jsx)(s.code,{children:"liveAgent"})]}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Message shown when the chat is transferred to another agent."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatEstimatedWaitTimeMessage"})}),(0,i.jsxs)(s.td,{children:["The estimated wait time for the chat to get assigned is ",(0,i.jsx)(s.code,{children:"waitTime"})," seconds"]}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsxs)(s.td,{children:["Estimated wait message. Use ",(0,i.jsx)(s.code,{children:"`waitTime`"})," to show seconds."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatDisplayAgentName"})}),(0,i.jsx)(s.td,{children:"true"}),(0,i.jsx)(s.td,{children:"Boolean"}),(0,i.jsx)(s.td,{children:"Enable to show the agent's name upon assignment."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatIdleTimeWarningMessage"})}),(0,i.jsx)(s.td,{children:"Idle warning message"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Message shown when there's user inactivity."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatIdleTimeTimeoutMessage"})}),(0,i.jsx)(s.td,{children:"Idle timeout message"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Message when the chat is terminated due to inactivity."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatConnectionFailureMessage"})}),(0,i.jsx)(s.td,{children:"Connection failure"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Message shown when there's a failure in connecting with the agent."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatAgentDisconnectMessage"})}),(0,i.jsx)(s.td,{children:"Agent has disconnected"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Message shown when an agent disconnects and others are available."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"salesforceLiveChatAgentTimeoutMessage"})}),(0,i.jsx)(s.td,{children:"Agent timeout occurred"}),(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:"Message when the agent timeout threshold is crossed."})]})]})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of success:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'{\n   "assignedTo": true,\n   "success": true,\n   "status": "ASSIGNED",\n   "ticketInfo": "{{apiresponse}}"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the salesforce create ticket API"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sample response in case of failure:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'{\n   "success": false,\n   "assignedTo": false,\n   "agentNotAvailable": true,\n   "message": "TicketId is not created and transferring the control back to the bot",\n   "ticketInfo": "{{apiresponse}}"\n}\n\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"apiresponse represents the raw response from the salesforce create ticket API"})}),"\n",(0,i.jsx)(s.h2,{id:"2-configuration",children:"2. Configuration"}),"\n",(0,i.jsx)(s.p,{children:"You can configure any of the above mentioned live agent integration(s) by following these steps:-"}),"\n",(0,i.jsx)(s.p,{children:"To enable the integration in the yellow.ai Integrations Module,"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Login to app.yellow.ai, search for your bot in the ",(0,i.jsx)(s.strong,{children:"Search Projects"})," section and then click the bot."]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://i.imgur.com/LfusT2x.png",alt:"drawing",width:"100%"}),"\n",(0,i.jsxs)(s.ol,{start:"2",children:["\n",(0,i.jsxs)(s.li,{children:["Click the ",(0,i.jsx)(s.strong,{children:"Growth icon"})," on the left navigation bar."]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://i.imgur.com/f98YAw0.png",alt:"drawing",width:"100%"}),"\n",(0,i.jsxs)(s.ol,{start:"3",children:["\n",(0,i.jsxs)(s.li,{children:["Click  ",(0,i.jsx)(s.strong,{children:"Data Explorer"}),". You will be redirected to the cloud.yellow.ai\u2019s UI."]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://i.imgur.com/brA6IQ6.png",alt:"drawing",width:"100%"}),"\n",(0,i.jsxs)(s.ol,{start:"4",children:["\n",(0,i.jsxs)(s.li,{children:["On the top left corner, click the drop-down and choose ",(0,i.jsx)(s.strong,{children:"Integrations"}),"."]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://i.imgur.com/X1vVHwH.png",alt:"drawing",width:"100%"}),"\n",(0,i.jsxs)(s.ol,{start:"5",children:["\n",(0,i.jsx)(s.li,{children:"Configure the required live chat integration"}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://i.imgur.com/Fs2ANIf.png",alt:"drawing",width:"100%"}),"\n",(0,i.jsxs)(s.ol,{start:"6",children:["\n",(0,i.jsxs)(s.li,{children:[".After entering the required values, click ",(0,i.jsx)(s.strong,{children:"Connect"})," and the integration will get enabled on yellow.ai."]}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);