"use strict";(self.webpackChunkbenthos=self.webpackChunkbenthos||[]).push([[2919],{603905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return g}});var a=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(n),u=i,g=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[p]="string"==typeof e?e:i,l[1]=r;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},798565:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return p}});var a=n(487462),i=n(263366),o=(n(667294),n(603905)),l=["components"],r={title:"Inbox SDK for Android",sidebar_label:"Android"},s=void 0,c={unversionedId:"platform_concepts/mobile/inbox/android",id:"platform_concepts/mobile/inbox/android",title:"Inbox SDK for Android",description:"SDK integration",source:"@site/docs/platform_concepts/mobile/inbox/android.md",sourceDirName:"platform_concepts/mobile/inbox",slug:"/platform_concepts/mobile/inbox/android",permalink:"/docs/platform_concepts/mobile/inbox/android",draft:!1,tags:[],version:"current",frontMatter:{title:"Inbox SDK for Android",sidebar_label:"Android"},sidebar:"platform_concepts",previous:{title:"Install yellow.ai search",permalink:"/docs/platform_concepts/yellowaisearch/installyellowaisearch"},next:{title:"iOS",permalink:"/docs/platform_concepts/mobile/inbox/ios"}},d={},p=[{value:"SDK integration",id:"sdk-integration",level:2},{value:"Demo App",id:"demo-app",level:4},{value:"Initialization",id:"initialization",level:2},{value:"applicationContext",id:"applicationcontext",level:4},{value:"apiKey",id:"apikey",level:4},{value:"userId",id:"userid",level:4},{value:"botId",id:"botid",level:4},{value:"Example",id:"example",level:4},{value:"Overview",id:"overview",level:2},{value:"Overview Activity",id:"overview-activity",level:3},{value:"Overview Fragment",id:"overview-fragment",level:3},{value:"My Chat",id:"my-chat",level:2},{value:"My Chat Activity",id:"my-chat-activity",level:3},{value:"My Chat Fragment",id:"my-chat-fragment",level:3},{value:"Notifications",id:"notifications",level:2},{value:"Background Notification",id:"background-notification",level:3},{value:"Local Notification",id:"local-notification",level:3},{value:"Video call Notification",id:"video-call-notification",level:3},{value:"Agent Status",id:"agent-status",level:2},{value:"Get All Agent Statuses",id:"get-all-agent-statuses",level:3},{value:"Get Agent Status",id:"get-agent-status",level:3},{value:"Set Agent Status",id:"set-agent-status",level:3},{value:"Logout",id:"logout",level:2},{value:"Mandatory overrides",id:"mandatory-overrides",level:2},{value:"Optional overrides",id:"optional-overrides",level:2},{value:"colors.xml",id:"colorsxml",level:3},{value:"Dimens.xml",id:"dimensxml",level:3},{value:"Informational",id:"informational",level:2},{value:"Versions",id:"versions",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Permissions",id:"permissions",level:3}],m={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"sdk-integration"},"SDK integration"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You can see what's new and download the sdk ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/yellowmessenger/inbox-sdk-link/blob/master/android.md"},"here")),(0,o.kt)("li",{parentName:"ol"},"Add the SDK to your project")),(0,o.kt)("h4",{id:"demo-app"},"Demo App"),(0,o.kt)("p",null,"A demo app has been created to understand the integration and usage of the SDK. It can be found here ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/yellowmessenger/Inbox-SDK-Demo-App-Android"},"https://github.com/yellowmessenger/Inbox-SDK-Demo-App-Android")),(0,o.kt)("h2",{id:"initialization"},"Initialization"),(0,o.kt)("p",null,"The SDK can be initialised by passing API_KEY, USER_ID and BOT_ID to the init method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.init(applicationContext : Context,\n    apiKey : String,\n    userId: String,\n    botId : String\n) : LiveData<Resource<Void>>\n")),(0,o.kt)("h4",{id:"applicationcontext"},"applicationContext"),(0,o.kt)("p",null,"Application context is used to initialise the service which runs XMPP."),(0,o.kt)("h4",{id:"apikey"},"apiKey"),(0,o.kt)("p",null,"API_KEY will be provided by yellow.ai, It is clients responsibility to keep the API_KEY safe.\nThis is a mandatory parameter."),(0,o.kt)("h4",{id:"userid"},"userId"),(0,o.kt)("p",null,"UserId will be the id registered/provided to yellow.ai by the client to authenticate their employee. This is a mandatory parameter."),(0,o.kt)("h4",{id:"botid"},"botId"),(0,o.kt)("p",null,"BOT_ID will be provided by yellow.ai.\nThis is a mandatory parameter."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import android.app.Application\nimport androidx.lifecycle.ProcessLifecycleOwner\nimport com.yellowmessenger.YellowInbox\nimport com.yellowmessenger.YmAppProcessLifeCycleListener\n\nclass TestApplication : Application() {\n\n  override fun onCreate() {\n    super.onCreate()\n\n    //Set Process lifecycle listener\n    // This is required to listen to application state\n    ProcessLifecycleOwner.get()\n        .lifecycle\n        .addObserver(YmAppProcessLifeCycleListener())\n\n    // Initialise the SDK\n    YellowInbox.init(applicationContext, "API_KEY", "USER_ID", "BOT_ID")\n           .observe(lifecycleOwner, Observer {\n              when(it.status) {\n              SUCCESS-> Log.d(TAG, "SDK initialised successfully")\n              ERROR -> Log.d(TAG, "Error while initialising the SDK")\n              else-> null\n         }\n      })\n    }\n}\n')),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Overview view is provided as a fragment and activity"),(0,o.kt)("h3",{id:"overview-activity"},"Overview Activity"),(0,o.kt)("p",null,"If clients want to use Overview Activity in their application, they can call the following method to get the Activity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.startOverviewActivity(context:Context)\n")),(0,o.kt)("h3",{id:"overview-fragment"},"Overview Fragment"),(0,o.kt)("p",null,"If clients want to use Overview Fragment in their application, they can call the following method to get the fragment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"val fragment =YellowInbox.getOverviewFragment()\n")),(0,o.kt)("p",null,"Clients can embed this fragment in their activity and begin the transaction as they do for any other fragment."),(0,o.kt)("h2",{id:"my-chat"},"My Chat"),(0,o.kt)("p",null,"Chats view is provided as a fragment and activity"),(0,o.kt)("h3",{id:"my-chat-activity"},"My Chat Activity"),(0,o.kt)("p",null,"If clients want to use MyChat Activity in their application, they can call the following method to get the Activity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.startMyChatActivity(context:Context)\n")),(0,o.kt)("h3",{id:"my-chat-fragment"},"My Chat Fragment"),(0,o.kt)("p",null,"If clients want to use MyChat Fragment in their application, they can call the following method to get the fragment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"val fragment =YellowInbox.getMyChatsFragment()\n")),(0,o.kt)("p",null,"Clients can embed this fragment in their activity and begin the transaction as they do for any other fragment."),(0,o.kt)("h2",{id:"notifications"},"Notifications"),(0,o.kt)("h3",{id:"background-notification"},"Background Notification"),(0,o.kt)("p",null,"To receive firebase notification clients need to send Firebase device token to SDK. To do so the following method can be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'YellowInbox.setFirebaseDeviceToken("FIRE_BASE_DEVICE_TOKEN")\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Make sure to call this function when the device token is changed.")),(0,o.kt)("p",null,"Clients will receive firebase notification if the app is not running in foreground or in background, or if Ticket Create, User Message or Agent is added as collaborator actions happening on a ticket."),(0,o.kt)("p",null,"Clients need not to listen to these notifications when the app is running, SDK will take care of such events."),(0,o.kt)("p",null,"Clients need to call following method if they want to take user to appropriate view once user clicks on notification delivered in system tray and sent by yellow.ai"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'fun getDataFromIntent(): MutableMap<String, Any?> {\n   val data = mutableMapOf<String, Any?>()\n   if (intent.extras != null) {\n     for (key in intent.extras!!.keySet()) {\n       val value = intent.extras!![key]\n       data[key] = value\n     }\n     this.intent.putExtras(Bundle.EMPTY)\n   }\n   return data\n}\n\nval data: Map<String, Any?> = getDataFromIntent()\n\nif (data.containsKey("ym")) {\n  YellowInbox.handleBackgroundNotification(\n    context = applicationContext,\n    data = data\n  )\n}\n')),(0,o.kt)("p",null,"Notification data will get delivered as intent extra in launcher Activity. Clients can use the above mentioned method to fetch data from Intent and create a map."),(0,o.kt)("h3",{id:"local-notification"},"Local Notification"),(0,o.kt)("p",null,"Clients will receive local notification that will be triggered by the SDK based on the events received over XMPP.\nIn case a client wants to override the normal behaviour of notification or want to update title/body, they can do so by overriding the YmMessageReceiver class."),(0,o.kt)("p",null,"Clients need to call following method for listening to local event notification and modifying them"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.setLocalReceiver(receiver:BroadcastReceiver)\n")),(0,o.kt)("p",null,"Example (How to use YmMessageReceiver)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.yellowmessenger.YmMessageReceiver\nimport com.yellowmessenger.ui.xmpp.model.YmTicketCreateModel\nimport com.yellowmessenger.ui.xmpp.model.YmXMPPMessageModel\n\nclass TestMessageReceiver : YmMessageReceiver() {\n    override fun onTicketCreateEventReceived(\n        title: String?,\n        body: String?,\n        model: YmTicketCreateModel\n    ) {\n        super.onTicketCreateEventReceived(title, body, model)\n    }\n\n    override fun onTicketUpdateEventReceived(\n        title: String?,\n        body: String?,\n        model: YmXMPPMessageModel\n    ) {\n        super.onTicketUpdateEventReceived(title, body, model)\n    }\n}\n")),(0,o.kt)("p",null,"Clients will receive events for Ticket Create and Ticket Update (new message, agent added as collaborator).\nWe recommend not to modify model data as it may result in not showing notification at all. Model is exposed so the client can make use of data present in it to create the required title and body."),(0,o.kt)("h3",{id:"video-call-notification"},"Video call Notification"),(0,o.kt)("p",null,"If a client is receiving a video call notification while the app is in background, there is no special handling required for it. Simply tapping on notification will take the user to the appropriate view and show a dialog to answer/decline the call."),(0,o.kt)("p",null,"In case the app is running and in the foreground, the client needs to listen to Firebase notification and call the following function."),(0,o.kt)("p",null,"Assuming client has already have a service which overrides FirebaseMessagingService"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Client need to set the Firebase token in case device token changes by calling")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.setFirebaseDeviceToken(token)\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"In onMessageReceived(message:RemoteMessage) function client need to check if message contains \u201ccallJoinUrl\u201d call the SDK function to handle it")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'if (message.data.containsKey("callJoinUrl") && !message.data["callJoinUrl"].isNullOrEmpty()) {\n    YellowInbox.handleBackgroundNotification(applicationContext, message.data)\n}\n')),(0,o.kt)("p",null,"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class YmSupportFirebaseMessagingService : FirebaseMessagingService() {\n    override fun onNewToken(token: String) {\n        sendRegistrationToServer(token)\n    }\n\n    private fun sendRegistrationToServer(token: String) {\n        val hasValidData = hasValidData(this.applicationContext)\n        if (hasValidData) {\n            YellowInbox.setFirebaseDeviceToken(token)\n        }\n    }\n\n    override fun onMessageReceived(message: RemoteMessage) {\n        super.onMessageReceived(message)\n        if (message.data.containsKey("callJoinUrl") && !message.data["callJoinUrl"].isNullOrEmpty()) {\n            YellowInbox.handleBackgroundNotification(applicationContext, message.data)\n        }\n    }\n}\n')),(0,o.kt)("p",null,"A call declined from notification can be joined from the Chat view by tapping on the call icon"),(0,o.kt)("h2",{id:"agent-status"},"Agent Status"),(0,o.kt)("h3",{id:"get-all-agent-statuses"},"Get All Agent Statuses"),(0,o.kt)("p",null,"To get all possible statuses of logged in User against the bot id (Used for initialising the SDK), client can call the following method.\nThis can be used to show all the possible status when Agent want to change the status."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.getAllAgentStatus(): List<YmAgentStatus>\n")),(0,o.kt)("h3",{id:"get-agent-status"},"Get Agent Status"),(0,o.kt)("p",null,"To get availability status of logged in User against the bot id (Used for initialising the SDK), client can call the following method and observe on it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.getAgentStatus(): LiveData<Resource<YmAgentStatus>>\n")),(0,o.kt)("p",null,"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.getAgentStatus().observe(lifecycleOwner, Observer {\n  when(it.status) {\n    Resource.SUCCESS -> {\n      val data:YmAgentStatus = it.data\n    }\n    Resource.ERROR -> {\n      val msg:String = it.message\n    }\n    else -> {\n\n    }\n  }\n})\n")),(0,o.kt)("h3",{id:"set-agent-status"},"Set Agent Status"),(0,o.kt)("p",null,"To set the status of logged in user against the bot id (Used for initialising the SDK), the client can call the following method and observe on it.\nClient need to pass the YmAgentStatus object received from making ",(0,o.kt)("inlineCode",{parentName:"p"},"YellowInbox.getAllAgentStatus()")," call."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.setAgentStatus(status: YmAgentStatus): LiveData<Resource<Void>>\n")),(0,o.kt)("p",null,"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'YellowInbox.setAgentStatus(status)\n  .observe(lifecycleOwner,Observer{\n     when(it.status){\n       Resource.SUCCESS -> {\n         showToast("Status changed")\n       }\n       Resource.ERROR -> {\n         val msg:String = it.message\n       }\n       else -> {\n\n       }\n   }\n})\n')),(0,o.kt)("h2",{id:"logout"},"Logout"),(0,o.kt)("p",null,"By calling logout, all the services and notifications will be terminated. You can call this function when user logs out of the app"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YellowInbox.logout(): MutableLiveData<Resource<Void>>\n")),(0,o.kt)("p",null,"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'YellowInbox.logout()\n  .observe(lifecycleOwner,Observer{\n     when(it.status){\n       Resource.SUCCESS -> {\n         showToast("Logout Success!")\n       }\n       Resource.ERROR -> {\n         val msg:String = it.message\n       }\n       else -> {\n\n       }\n   }\n})\n')),(0,o.kt)("h2",{id:"mandatory-overrides"},"Mandatory overrides"),(0,o.kt)("p",null,"Please add the following key in your strings.xml file and change the value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<string name="application_id_for_provider">your.app.id.fileprovider</string>\n')),(0,o.kt)("p",null,"By doing this all the images/files will be sandboxed for your app."),(0,o.kt)("h2",{id:"optional-overrides"},"Optional overrides"),(0,o.kt)("h3",{id:"colorsxml"},"colors.xml"),(0,o.kt)("p",null,"You can update your colors.xml. By overriding these value you can the color as per your app design"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<color name="ym_app_bar_color">@color/primaryColor</color>\n<color name="ym_status_bar_color">@color/primaryDarkColor</color>\n<color name="ym_app_bar_text_color">@color/white</color>\n<color name="ym_app_bar_icon_color">@color/white</color>\n<color name="ym_text_color_primary">@color/primaryTextColor</color>\n<color name="ym_text_color_secondary">@color/secondaryTextColor</color>\n<color name="ym_accent_color">@color/colorAccent</color>\n<color name="ym_icon_color">#707E8A</color>\n<color name="ym_event_msg_background_color">#EAF5FB</color> //light color\n<color name="ym_sent_msg_background_color">#007ED4</color> //dark color\n<color name="ym_rcv_msg_background_color">#F5F8FA</color> // light color\n<color name="ym_progressbar_color">#14568E</color>\n')),(0,o.kt)("h3",{id:"dimensxml"},"Dimens.xml"),(0,o.kt)("p",null,"By overriding the client can control size texts and progress bar."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<dimen  name="ym_title_size">16sp</dimen>\n<dimen  name="ym_subtitle_size">14sp</dimen>\n<dimen  name="ym_caption_size">12sp</dimen>\n<dimen name="ym_body_size">14dp</dimen>\n<dimen name="ym_progress_bar_size">36dp</dimen>\n<dimen name="ym_in_view_progress_bar_size">24dp</dimen>\n')),(0,o.kt)("h2",{id:"informational"},"Informational"),(0,o.kt)("h3",{id:"versions"},"Versions"),(0,o.kt)("p",null,"YellowInbox SDK usage following minimumSdkVersion targetSdkVersion."),(0,o.kt)("p",null,"minSdkVersion 21\ntargetSdkVersion 30"),(0,o.kt)("h3",{id:"dependencies"},"Dependencies"),(0,o.kt)("p",null,"YellowInbox SDK usage following dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"dependencies {\n\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n    implementation 'androidx.core:core-ktx:1.5.0'\n    implementation 'androidx.appcompat:appcompat:1.3.0'\n    implementation 'com.google.android.material:material:1.3.0'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation 'androidx.gridlayout:gridlayout:1.0.0'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'\n\n    implementation 'com.google.dagger:dagger:2.27'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    kapt 'com.google.dagger:dagger-compiler:2.27'\n\n    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'\n    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'\n    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'\n    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'\n\n    // Glide\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'\n\n    //Smack\n    implementation \"org.igniterealtime.smack:smack-android-extensions:4.2.0\"\n    implementation \"org.igniterealtime.smack:smack-tcp:4.2.0\"\n\n    //Event bus\n    implementation 'org.greenrobot:eventbus:3.2.0'\n\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n}\n")),(0,o.kt)("h3",{id:"permissions"},"Permissions"),(0,o.kt)("p",null,"YellowInbox SDK usage following permissions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />\n<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />\n')))}u.isMDXComponent=!0}}]);