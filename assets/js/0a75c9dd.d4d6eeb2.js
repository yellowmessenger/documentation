"use strict";(self.webpackChunkbenthos=self.webpackChunkbenthos||[]).push([[50006],{28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>h});var n=i(96540);const r={},d=n.createContext(r);function s(e){const t=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function h(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(d.Provider,{value:t},e.children)}},35731:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>h,default:()=>a,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"platform_concepts/studio/build/nodes/action-nodes-overview/modifier","title":"Modifier node","description":"Modifier node allows you to convert user input into a specific format before passing it to a database, an API, or displaying it to the user.","source":"@site/docs/platform_concepts/studio/build/nodes/action-nodes-overview/modifier.md","sourceDirName":"platform_concepts/studio/build/nodes/action-nodes-overview","slug":"/platform_concepts/studio/build/nodes/action-nodes-overview/modifier","permalink":"/docs/platform_concepts/studio/build/nodes/action-nodes-overview/modifier","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Modifier node","sidebar_label":"Modifier"},"sidebar":"platform_concepts","previous":{"title":"Knowledge search","permalink":"/docs/platform_concepts/studio/build/nodes/action-nodes-overview/knowledge-search-node"},"next":{"title":"Name validator","permalink":"/docs/platform_concepts/studio/build/nodes/action-nodes-overview/name-validator"}}');var r=i(74848),d=i(28453);const s={title:"Modifier node",sidebar_label:"Modifier"},h=void 0,o={},l=[{value:"Configure Modifier node",id:"configure-modifier-node",level:2}];function c(e){const t={a:"a",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Modifier node allows you to convert user input into a specific format before passing it to a database, an API, or displaying it to the user."}),"\n",(0,r.jsx)(t.p,{children:'For example, if a user enters "hello" and you want to display or store it in uppercase for consistency, the Modifier node can convert "hello" to "HELLO".'}),"\n",(0,r.jsx)(t.p,{children:"This node is useful when you need to standardize data formats for backend processing or display purposes."}),"\n",(0,r.jsx)(t.p,{children:"You can transform the input in various ways by selecting options such as:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Option(s)"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Output type"}),(0,r.jsx)(t.th,{children:"Sample input"}),(0,r.jsx)(t.th,{children:"Sample output"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Capitalize 1st letter"}),(0,r.jsx)(t.td,{children:"Capitalizes the first letter of the input"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"i am aakanksha"}),(0,r.jsx)(t.td,{children:"I am aakanksha"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Capitalize 1st char of word"}),(0,r.jsx)(t.td,{children:"Capitalizes the first character of the input"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"hi aakanksha"}),(0,r.jsx)(t.td,{children:"Hi Aakanksha"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Lower case all"}),(0,r.jsx)(t.td,{children:"Converts all the letters of the input to lower case"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"Hi AakanKsha"}),(0,r.jsx)(t.td,{children:"hi aakanksha"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Upper case all"}),(0,r.jsx)(t.td,{children:"Converts all the letters of the input to upper case"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"Hi AakanKsha"}),(0,r.jsx)(t.td,{children:"HI AAKANKSHA"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Clean Input"}),(0,r.jsx)(t.td,{children:"Cleans the input off extra characters"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"vidyadh\u0101r n\u0101g\u0101r,ja\u012dp\u016dr"}),(0,r.jsx)(t.td,{children:"vidhyadhar nagar, jaipur"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Add on both sides"}),(0,r.jsx)(t.td,{children:"Adds a character on both sides of the input (The length should be lesser than teh defined length)"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"Akku (x = - , y = 6)"}),(0,r.jsx)(t.td,{children:"-Akku-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Add at end"}),(0,r.jsx)(t.td,{children:"Adds a character at the end of the input (will be added if length is lesser than the defined length)"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"Akku (x = - , y = 6)"}),(0,r.jsx)(t.td,{children:"Akku--"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Add at start"}),(0,r.jsx)(t.td,{children:"Prefix the input with a character. (will be added if the length is lesser than the defined length)"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"Akku (x = - , y = 6)"}),(0,r.jsx)(t.td,{children:"--Akku"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Replace first"}),(0,r.jsx)(t.td,{children:"Replaces the character entered in find preset with the character in replace preset at the prefix of the input."}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.a,{href:"mailto:abc@gmail.com",children:"abc@gmail.com"})," (x=.,y=[dot])"]}),(0,r.jsx)(t.td,{children:"abc@gmail[dot]com"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Replace All"}),(0,r.jsx)(t.td,{children:"Replaces the character entered in find preset with the character in replace preset at any part of the input."}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.a,{href:"mailto:abc@gmail.com",children:"abc@gmail.com"})," (x=.,y=[dot])"]}),(0,r.jsx)(t.td,{children:"abc@gmail[dot]com"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Remove from both sides"}),(0,r.jsx)(t.td,{children:"Removes the specified character from both the sides of the input"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"-Akku- (x=-)"}),(0,r.jsx)(t.td,{children:"Akku"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Remove from start"}),(0,r.jsx)(t.td,{children:"Removes the specified character from the prefix of the input"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"-Akku- (x=-)"}),(0,r.jsx)(t.td,{children:"Akku-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Remove from end"}),(0,r.jsx)(t.td,{children:"Removes the specified character from the suffix of the input"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"-Akku- (x=-)"}),(0,r.jsx)(t.td,{children:"-Akku"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Limit length"}),(0,r.jsx)(t.td,{children:"The input length is restricted to the specified number in the length preset, and any additional characters beyond that are substituted with the character defined in the omission preset."}),(0,r.jsx)(t.td,{children:"Length limit"}),(0,r.jsx)(t.td,{children:"Aakanksha Jain (x=12)"}),(0,r.jsx)(t.td,{children:"Aakanksha Ja..."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Slice"}),(0,r.jsx)(t.td,{children:"Provides the input between the set positions"}),(0,r.jsx)(t.td,{children:"Array"}),(0,r.jsx)(t.td,{children:"[1,2,3,4,5] (2,4)"}),(0,r.jsx)(t.td,{children:"3"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Split by space"}),(0,r.jsx)(t.td,{children:"Splits the input into arrays"}),(0,r.jsx)(t.td,{children:"Array"}),(0,r.jsx)(t.td,{children:"tree house"}),(0,r.jsx)(t.td,{children:'["tree", "house"]'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Split into words"}),(0,r.jsx)(t.td,{children:"The input is divided into individual words based on the character specified in the preset."}),(0,r.jsx)(t.td,{children:"Array"}),(0,r.jsx)(t.td,{children:"treehouse ,"}),(0,r.jsx)(t.td,{children:'["tree", "house"]'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Join"}),(0,r.jsx)(t.td,{children:"Join the input array with the character in preset"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:'["My", "Name", "is", "Aakanksha"] (with = \'-\')'}),(0,r.jsx)(t.td,{children:"My-Name-is-Aakanksha"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Pick by position"}),(0,r.jsx)(t.td,{children:"Picks the word in the array in the specified position"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:'["My", "Name", "is", "Aakanksha"]  (3)'}),(0,r.jsx)(t.td,{children:"is"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Get length"}),(0,r.jsx)(t.td,{children:"Returns an array's length"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:'[]"My", "Name", "is", "Aakanksha"]'}),(0,r.jsx)(t.td,{children:"4"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"For each"}),(0,r.jsx)(t.td,{children:"Apply modifier options on each element of the array"}),(0,r.jsx)(t.td,{children:"Select modifier"}),(0,r.jsx)(t.td,{children:'["My", "Name", "is", "Aakanksha"] (operation = Upper case all)'}),(0,r.jsx)(t.td,{children:'["MY", "NAME", "IS", "AAKANKSHA"]'})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"configure-modifier-node",children:"Configure Modifier node"}),"\n",(0,r.jsx)(t.p,{children:"Consider a scenario where you want to collect user feedback through chatbot and store it in a DB table in uppercase."}),"\n",(0,r.jsx)(t.p,{children:"To configure Modifier node, follow these steps:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Drag and drop the Modifier node to the workflow in the flow editor."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://imgur.com/p6W90Yy.png",alt:""})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Choose whether you want to modify a direct text input or a variable:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"If you select Text, enter the text value that needs to be modified."}),"\n",(0,r.jsx)(t.li,{children:"If you select Variable, choose the variable that holds the user's input."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"In Modify input section, select the modification type based on your requirements (for example, Capitalize 1st char of word, Capitalize 1st letter)."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Use the Store response in option to choose or create a variable that will store the modified input."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"To test how the node works, click the button at the top of the flow editor and enter your input to see the corresponding output."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://i.imgur.com/EbhyWqD.png",alt:""})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Refer to the following GIF to see how this node works."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://imgur.com/P1TfQG8.gif",alt:""})})]})}function a(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);